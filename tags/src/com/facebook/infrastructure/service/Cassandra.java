/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.facebook.infrastructure.service;

import java.util.ArrayList;
import java.util.AbstractMap;
import java.util.HashMap;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class Cassandra
{

  public interface Iface extends com.facebook.fb303.FacebookService.Iface {

    public ArrayList<column_t> get_slice(String tablename, String key, String columnFamily_column, int start, int count) throws TException;

    public column_t get_column(String tablename, String key, String columnFamily_column) throws TException;

    public int get_column_count(String tablename, String key, String columnFamily_column) throws TException;

    public void insert(String tablename, String key, String columnFamily_column, String cellData, int timestamp) throws TException;

    public void batch_insert(batch_mutation_t batchMutation) throws TException;

    public boolean batch_insert_blocking(batch_mutation_t batchMutation) throws TException;

    public void remove(String tablename, String key, String columnFamily_column) throws TException;

    public ArrayList<superColumn_t> get_slice_super(String tablename, String key, String columnFamily_superColumnName, int start, int count) throws TException;

    public superColumn_t get_superColumn(String tablename, String key, String columnFamily) throws TException;

    public void batch_insert_superColumn(batch_mutation_super_t batchMutationSuper) throws TException;

    public boolean batch_insert_superColumn_blocking(batch_mutation_super_t batchMutationSuper) throws TException;

  }

  public static class Client extends com.facebook.fb303.FacebookService.Client implements Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      super(iprot, oprot);
    }

    public ArrayList<column_t> get_slice(String tablename, String key, String columnFamily_column, int start, int count) throws TException
    {
      send_get_slice(tablename, key, columnFamily_column, start, count);
      return recv_get_slice();
    }

    public void send_get_slice(String tablename, String key, String columnFamily_column, int start, int count) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_slice", TMessageType.CALL, seqid_));
      get_slice_args args = new get_slice_args();
      args.tablename = tablename;
      args.key = key;
      args.columnFamily_column = columnFamily_column;
      args.start = start;
      args.count = count;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ArrayList<column_t> recv_get_slice() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_slice_result result = new get_slice_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_slice failed: unknown result");
    }

    public column_t get_column(String tablename, String key, String columnFamily_column) throws TException
    {
      send_get_column(tablename, key, columnFamily_column);
      return recv_get_column();
    }

    public void send_get_column(String tablename, String key, String columnFamily_column) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_column", TMessageType.CALL, seqid_));
      get_column_args args = new get_column_args();
      args.tablename = tablename;
      args.key = key;
      args.columnFamily_column = columnFamily_column;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public column_t recv_get_column() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_column_result result = new get_column_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_column failed: unknown result");
    }

    public int get_column_count(String tablename, String key, String columnFamily_column) throws TException
    {
      send_get_column_count(tablename, key, columnFamily_column);
      return recv_get_column_count();
    }

    public void send_get_column_count(String tablename, String key, String columnFamily_column) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_column_count", TMessageType.CALL, seqid_));
      get_column_count_args args = new get_column_count_args();
      args.tablename = tablename;
      args.key = key;
      args.columnFamily_column = columnFamily_column;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_get_column_count() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_column_count_result result = new get_column_count_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_column_count failed: unknown result");
    }

    public void insert(String tablename, String key, String columnFamily_column, String cellData, int timestamp) throws TException
    {
      send_insert(tablename, key, columnFamily_column, cellData, timestamp);
    }

    public void send_insert(String tablename, String key, String columnFamily_column, String cellData, int timestamp) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("insert", TMessageType.CALL, seqid_));
      insert_args args = new insert_args();
      args.tablename = tablename;
      args.key = key;
      args.columnFamily_column = columnFamily_column;
      args.cellData = cellData;
      args.timestamp = timestamp;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void batch_insert(batch_mutation_t batchMutation) throws TException
    {
      send_batch_insert(batchMutation);
    }

    public void send_batch_insert(batch_mutation_t batchMutation) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("batch_insert", TMessageType.CALL, seqid_));
      batch_insert_args args = new batch_insert_args();
      args.batchMutation = batchMutation;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean batch_insert_blocking(batch_mutation_t batchMutation) throws TException
    {
      send_batch_insert_blocking(batchMutation);
      return recv_batch_insert_blocking();
    }

    public void send_batch_insert_blocking(batch_mutation_t batchMutation) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("batch_insert_blocking", TMessageType.CALL, seqid_));
      batch_insert_blocking_args args = new batch_insert_blocking_args();
      args.batchMutation = batchMutation;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_batch_insert_blocking() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      batch_insert_blocking_result result = new batch_insert_blocking_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "batch_insert_blocking failed: unknown result");
    }

    public void remove(String tablename, String key, String columnFamily_column) throws TException
    {
      send_remove(tablename, key, columnFamily_column);
    }

    public void send_remove(String tablename, String key, String columnFamily_column) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("remove", TMessageType.CALL, seqid_));
      remove_args args = new remove_args();
      args.tablename = tablename;
      args.key = key;
      args.columnFamily_column = columnFamily_column;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ArrayList<superColumn_t> get_slice_super(String tablename, String key, String columnFamily_superColumnName, int start, int count) throws TException
    {
      send_get_slice_super(tablename, key, columnFamily_superColumnName, start, count);
      return recv_get_slice_super();
    }

    public void send_get_slice_super(String tablename, String key, String columnFamily_superColumnName, int start, int count) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_slice_super", TMessageType.CALL, seqid_));
      get_slice_super_args args = new get_slice_super_args();
      args.tablename = tablename;
      args.key = key;
      args.columnFamily_superColumnName = columnFamily_superColumnName;
      args.start = start;
      args.count = count;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ArrayList<superColumn_t> recv_get_slice_super() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_slice_super_result result = new get_slice_super_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_slice_super failed: unknown result");
    }

    public superColumn_t get_superColumn(String tablename, String key, String columnFamily) throws TException
    {
      send_get_superColumn(tablename, key, columnFamily);
      return recv_get_superColumn();
    }

    public void send_get_superColumn(String tablename, String key, String columnFamily) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("get_superColumn", TMessageType.CALL, seqid_));
      get_superColumn_args args = new get_superColumn_args();
      args.tablename = tablename;
      args.key = key;
      args.columnFamily = columnFamily;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public superColumn_t recv_get_superColumn() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      get_superColumn_result result = new get_superColumn_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_superColumn failed: unknown result");
    }

    public void batch_insert_superColumn(batch_mutation_super_t batchMutationSuper) throws TException
    {
      send_batch_insert_superColumn(batchMutationSuper);
    }

    public void send_batch_insert_superColumn(batch_mutation_super_t batchMutationSuper) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("batch_insert_superColumn", TMessageType.CALL, seqid_));
      batch_insert_superColumn_args args = new batch_insert_superColumn_args();
      args.batchMutationSuper = batchMutationSuper;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean batch_insert_superColumn_blocking(batch_mutation_super_t batchMutationSuper) throws TException
    {
      send_batch_insert_superColumn_blocking(batchMutationSuper);
      return recv_batch_insert_superColumn_blocking();
    }

    public void send_batch_insert_superColumn_blocking(batch_mutation_super_t batchMutationSuper) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("batch_insert_superColumn_blocking", TMessageType.CALL, seqid_));
      batch_insert_superColumn_blocking_args args = new batch_insert_superColumn_blocking_args();
      args.batchMutationSuper = batchMutationSuper;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_batch_insert_superColumn_blocking() throws TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      batch_insert_superColumn_blocking_result result = new batch_insert_superColumn_blocking_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "batch_insert_superColumn_blocking failed: unknown result");
    }

  }
  public static class Processor extends com.facebook.fb303.FacebookService.Processor implements TProcessor {
    public Processor(Iface iface)
    {
      super(iface);
      iface_ = iface;
      processMap_.put("get_slice", new get_slice());
      processMap_.put("get_column", new get_column());
      processMap_.put("get_column_count", new get_column_count());
      processMap_.put("insert", new insert());
      processMap_.put("batch_insert", new batch_insert());
      processMap_.put("batch_insert_blocking", new batch_insert_blocking());
      processMap_.put("remove", new remove());
      processMap_.put("get_slice_super", new get_slice_super());
      processMap_.put("get_superColumn", new get_superColumn());
      processMap_.put("batch_insert_superColumn", new batch_insert_superColumn());
      processMap_.put("batch_insert_superColumn_blocking", new batch_insert_superColumn_blocking());
    }

    private Iface iface_;

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class get_slice implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_slice_args args = new get_slice_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_slice_result result = new get_slice_result();
        result.success = iface_.get_slice(args.tablename, args.key, args.columnFamily_column, args.start, args.count);
        result.__isset.success = true;
        oprot.writeMessageBegin(new TMessage("get_slice", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_column implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_column_args args = new get_column_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_column_result result = new get_column_result();
        result.success = iface_.get_column(args.tablename, args.key, args.columnFamily_column);
        result.__isset.success = true;
        oprot.writeMessageBegin(new TMessage("get_column", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_column_count implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_column_count_args args = new get_column_count_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_column_count_result result = new get_column_count_result();
        result.success = iface_.get_column_count(args.tablename, args.key, args.columnFamily_column);
        result.__isset.success = true;
        oprot.writeMessageBegin(new TMessage("get_column_count", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class insert implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        insert_args args = new insert_args();
        args.read(iprot);
        iprot.readMessageEnd();
        iface_.insert(args.tablename, args.key, args.columnFamily_column, args.cellData, args.timestamp);
        return;
      }
    }

    private class batch_insert implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        batch_insert_args args = new batch_insert_args();
        args.read(iprot);
        iprot.readMessageEnd();
        iface_.batch_insert(args.batchMutation);
        return;
      }
    }

    private class batch_insert_blocking implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        batch_insert_blocking_args args = new batch_insert_blocking_args();
        args.read(iprot);
        iprot.readMessageEnd();
        batch_insert_blocking_result result = new batch_insert_blocking_result();
        result.success = iface_.batch_insert_blocking(args.batchMutation);
        result.__isset.success = true;
        oprot.writeMessageBegin(new TMessage("batch_insert_blocking", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class remove implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        remove_args args = new remove_args();
        args.read(iprot);
        iprot.readMessageEnd();
        iface_.remove(args.tablename, args.key, args.columnFamily_column);
        return;
      }
    }

    private class get_slice_super implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_slice_super_args args = new get_slice_super_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_slice_super_result result = new get_slice_super_result();
        result.success = iface_.get_slice_super(args.tablename, args.key, args.columnFamily_superColumnName, args.start, args.count);
        result.__isset.success = true;
        oprot.writeMessageBegin(new TMessage("get_slice_super", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class get_superColumn implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        get_superColumn_args args = new get_superColumn_args();
        args.read(iprot);
        iprot.readMessageEnd();
        get_superColumn_result result = new get_superColumn_result();
        result.success = iface_.get_superColumn(args.tablename, args.key, args.columnFamily);
        result.__isset.success = true;
        oprot.writeMessageBegin(new TMessage("get_superColumn", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class batch_insert_superColumn implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        batch_insert_superColumn_args args = new batch_insert_superColumn_args();
        args.read(iprot);
        iprot.readMessageEnd();
        iface_.batch_insert_superColumn(args.batchMutationSuper);
        return;
      }
    }

    private class batch_insert_superColumn_blocking implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        batch_insert_superColumn_blocking_args args = new batch_insert_superColumn_blocking_args();
        args.read(iprot);
        iprot.readMessageEnd();
        batch_insert_superColumn_blocking_result result = new batch_insert_superColumn_blocking_result();
        result.success = iface_.batch_insert_superColumn_blocking(args.batchMutationSuper);
        result.__isset.success = true;
        oprot.writeMessageBegin(new TMessage("batch_insert_superColumn_blocking", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class get_slice_args implements TBase, java.io.Serializable   {
    public String tablename;
    public String key;
    public String columnFamily_column;
    public int start;
    public int count;

    public final Isset __isset = new Isset();
    public static final class Isset {
      public boolean tablename = false;
      public boolean key = false;
      public boolean columnFamily_column = false;
      public boolean start = false;
      public boolean count = false;
    }

    public get_slice_args() {
      this.start = -1;

      this.count = -1;

    }

    public get_slice_args(
      String tablename,
      String key,
      String columnFamily_column,
      int start,
      int count)
    {
      this();
      this.tablename = tablename;
      this.__isset.tablename = true;
      this.key = key;
      this.__isset.key = true;
      this.columnFamily_column = columnFamily_column;
      this.__isset.columnFamily_column = true;
      this.start = start;
      this.__isset.start = true;
      this.count = count;
      this.__isset.count = true;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id)
        {
          case -1:
            if (field.type == TType.STRING) {
              this.tablename = iprot.readString();
              this.__isset.tablename = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case -2:
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
              this.__isset.key = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case -3:
            if (field.type == TType.STRING) {
              this.columnFamily_column = iprot.readString();
              this.__isset.columnFamily_column = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case -4:
            if (field.type == TType.I32) {
              this.start = iprot.readI32();
              this.__isset.start = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case -5:
            if (field.type == TType.I32) {
              this.count = iprot.readI32();
              this.__isset.count = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("get_slice_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.tablename != null) {
        field.name = "tablename";
        field.type = TType.STRING;
        field.id = -1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.tablename);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        field.name = "key";
        field.type = TType.STRING;
        field.id = -2;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      if (this.columnFamily_column != null) {
        field.name = "columnFamily_column";
        field.type = TType.STRING;
        field.id = -3;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.columnFamily_column);
        oprot.writeFieldEnd();
      }
      field.name = "start";
      field.type = TType.I32;
      field.id = -4;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.start);
      oprot.writeFieldEnd();
      field.name = "count";
      field.type = TType.I32;
      field.id = -5;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.count);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("get_slice_args(");
      sb.append("tablename:");
      sb.append(this.tablename);
      sb.append(",key:");
      sb.append(this.key);
      sb.append(",columnFamily_column:");
      sb.append(this.columnFamily_column);
      sb.append(",start:");
      sb.append(this.start);
      sb.append(",count:");
      sb.append(this.count);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class get_slice_result implements TBase, java.io.Serializable   {
    public ArrayList<column_t> success;

    public final Isset __isset = new Isset();
    public static final class Isset {
      public boolean success = false;
    }

    public get_slice_result() {
    }

    public get_slice_result(
      ArrayList<column_t> success)
    {
      this();
      this.success = success;
      this.__isset.success = true;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.LIST) {
              {
                TList _list26 = iprot.readListBegin();
                this.success = new ArrayList<column_t>(_list26.size);
                for (int _i27 = 0; _i27 < _list26.size; ++_i27)
                {
                  column_t _elem28 = new column_t();
                  _elem28 = new column_t();
                  _elem28.read(iprot);
                  this.success.add(_elem28);
                }
                iprot.readListEnd();
              }
              this.__isset.success = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("get_slice_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.LIST;
          field.id = 0;
          oprot.writeFieldBegin(field);
          {
            oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
            for (column_t _iter29 : this.success)            {
              _iter29.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("get_slice_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class get_column_args implements TBase, java.io.Serializable   {
    public String tablename;
    public String key;
    public String columnFamily_column;

    public final Isset __isset = new Isset();
    public static final class Isset {
      public boolean tablename = false;
      public boolean key = false;
      public boolean columnFamily_column = false;
    }

    public get_column_args() {
    }

    public get_column_args(
      String tablename,
      String key,
      String columnFamily_column)
    {
      this();
      this.tablename = tablename;
      this.__isset.tablename = true;
      this.key = key;
      this.__isset.key = true;
      this.columnFamily_column = columnFamily_column;
      this.__isset.columnFamily_column = true;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id)
        {
          case -1:
            if (field.type == TType.STRING) {
              this.tablename = iprot.readString();
              this.__isset.tablename = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case -2:
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
              this.__isset.key = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case -3:
            if (field.type == TType.STRING) {
              this.columnFamily_column = iprot.readString();
              this.__isset.columnFamily_column = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("get_column_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.tablename != null) {
        field.name = "tablename";
        field.type = TType.STRING;
        field.id = -1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.tablename);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        field.name = "key";
        field.type = TType.STRING;
        field.id = -2;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      if (this.columnFamily_column != null) {
        field.name = "columnFamily_column";
        field.type = TType.STRING;
        field.id = -3;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.columnFamily_column);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("get_column_args(");
      sb.append("tablename:");
      sb.append(this.tablename);
      sb.append(",key:");
      sb.append(this.key);
      sb.append(",columnFamily_column:");
      sb.append(this.columnFamily_column);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class get_column_result implements TBase, java.io.Serializable   {
    public column_t success;

    public final Isset __isset = new Isset();
    public static final class Isset {
      public boolean success = false;
    }

    public get_column_result() {
    }

    public get_column_result(
      column_t success)
    {
      this();
      this.success = success;
      this.__isset.success = true;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.STRUCT) {
              this.success = new column_t();
              this.success.read(iprot);
              this.__isset.success = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("get_column_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.STRUCT;
          field.id = 0;
          oprot.writeFieldBegin(field);
          this.success.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("get_column_result(");
      sb.append("success:");
      sb.append(this.success.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class get_column_count_args implements TBase, java.io.Serializable   {
    public String tablename;
    public String key;
    public String columnFamily_column;

    public final Isset __isset = new Isset();
    public static final class Isset {
      public boolean tablename = false;
      public boolean key = false;
      public boolean columnFamily_column = false;
    }

    public get_column_count_args() {
    }

    public get_column_count_args(
      String tablename,
      String key,
      String columnFamily_column)
    {
      this();
      this.tablename = tablename;
      this.__isset.tablename = true;
      this.key = key;
      this.__isset.key = true;
      this.columnFamily_column = columnFamily_column;
      this.__isset.columnFamily_column = true;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id)
        {
          case -1:
            if (field.type == TType.STRING) {
              this.tablename = iprot.readString();
              this.__isset.tablename = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case -2:
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
              this.__isset.key = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case -3:
            if (field.type == TType.STRING) {
              this.columnFamily_column = iprot.readString();
              this.__isset.columnFamily_column = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("get_column_count_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.tablename != null) {
        field.name = "tablename";
        field.type = TType.STRING;
        field.id = -1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.tablename);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        field.name = "key";
        field.type = TType.STRING;
        field.id = -2;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      if (this.columnFamily_column != null) {
        field.name = "columnFamily_column";
        field.type = TType.STRING;
        field.id = -3;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.columnFamily_column);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("get_column_count_args(");
      sb.append("tablename:");
      sb.append(this.tablename);
      sb.append(",key:");
      sb.append(this.key);
      sb.append(",columnFamily_column:");
      sb.append(this.columnFamily_column);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class get_column_count_result implements TBase, java.io.Serializable   {
    public int success;

    public final Isset __isset = new Isset();
    public static final class Isset {
      public boolean success = false;
    }

    public get_column_count_result() {
    }

    public get_column_count_result(
      int success)
    {
      this();
      this.success = success;
      this.__isset.success = true;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              this.__isset.success = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("get_column_count_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        field.name = "success";
        field.type = TType.I32;
        field.id = 0;
        oprot.writeFieldBegin(field);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("get_column_count_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class insert_args implements TBase, java.io.Serializable   {
    public String tablename;
    public String key;
    public String columnFamily_column;
    public String cellData;
    public int timestamp;

    public final Isset __isset = new Isset();
    public static final class Isset {
      public boolean tablename = false;
      public boolean key = false;
      public boolean columnFamily_column = false;
      public boolean cellData = false;
      public boolean timestamp = false;
    }

    public insert_args() {
    }

    public insert_args(
      String tablename,
      String key,
      String columnFamily_column,
      String cellData,
      int timestamp)
    {
      this();
      this.tablename = tablename;
      this.__isset.tablename = true;
      this.key = key;
      this.__isset.key = true;
      this.columnFamily_column = columnFamily_column;
      this.__isset.columnFamily_column = true;
      this.cellData = cellData;
      this.__isset.cellData = true;
      this.timestamp = timestamp;
      this.__isset.timestamp = true;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id)
        {
          case -1:
            if (field.type == TType.STRING) {
              this.tablename = iprot.readString();
              this.__isset.tablename = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case -2:
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
              this.__isset.key = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case -3:
            if (field.type == TType.STRING) {
              this.columnFamily_column = iprot.readString();
              this.__isset.columnFamily_column = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case -4:
            if (field.type == TType.STRING) {
              this.cellData = iprot.readString();
              this.__isset.cellData = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case -5:
            if (field.type == TType.I32) {
              this.timestamp = iprot.readI32();
              this.__isset.timestamp = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("insert_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.tablename != null) {
        field.name = "tablename";
        field.type = TType.STRING;
        field.id = -1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.tablename);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        field.name = "key";
        field.type = TType.STRING;
        field.id = -2;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      if (this.columnFamily_column != null) {
        field.name = "columnFamily_column";
        field.type = TType.STRING;
        field.id = -3;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.columnFamily_column);
        oprot.writeFieldEnd();
      }
      if (this.cellData != null) {
        field.name = "cellData";
        field.type = TType.STRING;
        field.id = -4;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.cellData);
        oprot.writeFieldEnd();
      }
      field.name = "timestamp";
      field.type = TType.I32;
      field.id = -5;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("insert_args(");
      sb.append("tablename:");
      sb.append(this.tablename);
      sb.append(",key:");
      sb.append(this.key);
      sb.append(",columnFamily_column:");
      sb.append(this.columnFamily_column);
      sb.append(",cellData:");
      sb.append(this.cellData);
      sb.append(",timestamp:");
      sb.append(this.timestamp);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class batch_insert_args implements TBase, java.io.Serializable   {
    public batch_mutation_t batchMutation;

    public final Isset __isset = new Isset();
    public static final class Isset {
      public boolean batchMutation = false;
    }

    public batch_insert_args() {
    }

    public batch_insert_args(
      batch_mutation_t batchMutation)
    {
      this();
      this.batchMutation = batchMutation;
      this.__isset.batchMutation = true;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id)
        {
          case -1:
            if (field.type == TType.STRUCT) {
              this.batchMutation = new batch_mutation_t();
              this.batchMutation.read(iprot);
              this.__isset.batchMutation = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("batch_insert_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.batchMutation != null) {
        field.name = "batchMutation";
        field.type = TType.STRUCT;
        field.id = -1;
        oprot.writeFieldBegin(field);
        this.batchMutation.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("batch_insert_args(");
      sb.append("batchMutation:");
      sb.append(this.batchMutation.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class batch_insert_blocking_args implements TBase, java.io.Serializable   {
    public batch_mutation_t batchMutation;

    public final Isset __isset = new Isset();
    public static final class Isset {
      public boolean batchMutation = false;
    }

    public batch_insert_blocking_args() {
    }

    public batch_insert_blocking_args(
      batch_mutation_t batchMutation)
    {
      this();
      this.batchMutation = batchMutation;
      this.__isset.batchMutation = true;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id)
        {
          case -1:
            if (field.type == TType.STRUCT) {
              this.batchMutation = new batch_mutation_t();
              this.batchMutation.read(iprot);
              this.__isset.batchMutation = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("batch_insert_blocking_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.batchMutation != null) {
        field.name = "batchMutation";
        field.type = TType.STRUCT;
        field.id = -1;
        oprot.writeFieldBegin(field);
        this.batchMutation.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("batch_insert_blocking_args(");
      sb.append("batchMutation:");
      sb.append(this.batchMutation.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class batch_insert_blocking_result implements TBase, java.io.Serializable   {
    public boolean success;

    public final Isset __isset = new Isset();
    public static final class Isset {
      public boolean success = false;
    }

    public batch_insert_blocking_result() {
    }

    public batch_insert_blocking_result(
      boolean success)
    {
      this();
      this.success = success;
      this.__isset.success = true;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("batch_insert_blocking_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        field.name = "success";
        field.type = TType.BOOL;
        field.id = 0;
        oprot.writeFieldBegin(field);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("batch_insert_blocking_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class remove_args implements TBase, java.io.Serializable   {
    public String tablename;
    public String key;
    public String columnFamily_column;

    public final Isset __isset = new Isset();
    public static final class Isset {
      public boolean tablename = false;
      public boolean key = false;
      public boolean columnFamily_column = false;
    }

    public remove_args() {
    }

    public remove_args(
      String tablename,
      String key,
      String columnFamily_column)
    {
      this();
      this.tablename = tablename;
      this.__isset.tablename = true;
      this.key = key;
      this.__isset.key = true;
      this.columnFamily_column = columnFamily_column;
      this.__isset.columnFamily_column = true;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id)
        {
          case -1:
            if (field.type == TType.STRING) {
              this.tablename = iprot.readString();
              this.__isset.tablename = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case -2:
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
              this.__isset.key = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case -3:
            if (field.type == TType.STRING) {
              this.columnFamily_column = iprot.readString();
              this.__isset.columnFamily_column = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("remove_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.tablename != null) {
        field.name = "tablename";
        field.type = TType.STRING;
        field.id = -1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.tablename);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        field.name = "key";
        field.type = TType.STRING;
        field.id = -2;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      if (this.columnFamily_column != null) {
        field.name = "columnFamily_column";
        field.type = TType.STRING;
        field.id = -3;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.columnFamily_column);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("remove_args(");
      sb.append("tablename:");
      sb.append(this.tablename);
      sb.append(",key:");
      sb.append(this.key);
      sb.append(",columnFamily_column:");
      sb.append(this.columnFamily_column);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class get_slice_super_args implements TBase, java.io.Serializable   {
    public String tablename;
    public String key;
    public String columnFamily_superColumnName;
    public int start;
    public int count;

    public final Isset __isset = new Isset();
    public static final class Isset {
      public boolean tablename = false;
      public boolean key = false;
      public boolean columnFamily_superColumnName = false;
      public boolean start = false;
      public boolean count = false;
    }

    public get_slice_super_args() {
      this.start = -1;

      this.count = -1;

    }

    public get_slice_super_args(
      String tablename,
      String key,
      String columnFamily_superColumnName,
      int start,
      int count)
    {
      this();
      this.tablename = tablename;
      this.__isset.tablename = true;
      this.key = key;
      this.__isset.key = true;
      this.columnFamily_superColumnName = columnFamily_superColumnName;
      this.__isset.columnFamily_superColumnName = true;
      this.start = start;
      this.__isset.start = true;
      this.count = count;
      this.__isset.count = true;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id)
        {
          case -1:
            if (field.type == TType.STRING) {
              this.tablename = iprot.readString();
              this.__isset.tablename = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case -2:
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
              this.__isset.key = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case -3:
            if (field.type == TType.STRING) {
              this.columnFamily_superColumnName = iprot.readString();
              this.__isset.columnFamily_superColumnName = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case -4:
            if (field.type == TType.I32) {
              this.start = iprot.readI32();
              this.__isset.start = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case -5:
            if (field.type == TType.I32) {
              this.count = iprot.readI32();
              this.__isset.count = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("get_slice_super_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.tablename != null) {
        field.name = "tablename";
        field.type = TType.STRING;
        field.id = -1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.tablename);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        field.name = "key";
        field.type = TType.STRING;
        field.id = -2;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      if (this.columnFamily_superColumnName != null) {
        field.name = "columnFamily_superColumnName";
        field.type = TType.STRING;
        field.id = -3;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.columnFamily_superColumnName);
        oprot.writeFieldEnd();
      }
      field.name = "start";
      field.type = TType.I32;
      field.id = -4;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.start);
      oprot.writeFieldEnd();
      field.name = "count";
      field.type = TType.I32;
      field.id = -5;
      oprot.writeFieldBegin(field);
      oprot.writeI32(this.count);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("get_slice_super_args(");
      sb.append("tablename:");
      sb.append(this.tablename);
      sb.append(",key:");
      sb.append(this.key);
      sb.append(",columnFamily_superColumnName:");
      sb.append(this.columnFamily_superColumnName);
      sb.append(",start:");
      sb.append(this.start);
      sb.append(",count:");
      sb.append(this.count);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class get_slice_super_result implements TBase, java.io.Serializable   {
    public ArrayList<superColumn_t> success;

    public final Isset __isset = new Isset();
    public static final class Isset {
      public boolean success = false;
    }

    public get_slice_super_result() {
    }

    public get_slice_super_result(
      ArrayList<superColumn_t> success)
    {
      this();
      this.success = success;
      this.__isset.success = true;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.LIST) {
              {
                TList _list30 = iprot.readListBegin();
                this.success = new ArrayList<superColumn_t>(_list30.size);
                for (int _i31 = 0; _i31 < _list30.size; ++_i31)
                {
                  superColumn_t _elem32 = new superColumn_t();
                  _elem32 = new superColumn_t();
                  _elem32.read(iprot);
                  this.success.add(_elem32);
                }
                iprot.readListEnd();
              }
              this.__isset.success = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("get_slice_super_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.LIST;
          field.id = 0;
          oprot.writeFieldBegin(field);
          {
            oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
            for (superColumn_t _iter33 : this.success)            {
              _iter33.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("get_slice_super_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class get_superColumn_args implements TBase, java.io.Serializable   {
    public String tablename;
    public String key;
    public String columnFamily;

    public final Isset __isset = new Isset();
    public static final class Isset {
      public boolean tablename = false;
      public boolean key = false;
      public boolean columnFamily = false;
    }

    public get_superColumn_args() {
    }

    public get_superColumn_args(
      String tablename,
      String key,
      String columnFamily)
    {
      this();
      this.tablename = tablename;
      this.__isset.tablename = true;
      this.key = key;
      this.__isset.key = true;
      this.columnFamily = columnFamily;
      this.__isset.columnFamily = true;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id)
        {
          case -1:
            if (field.type == TType.STRING) {
              this.tablename = iprot.readString();
              this.__isset.tablename = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case -2:
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
              this.__isset.key = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case -3:
            if (field.type == TType.STRING) {
              this.columnFamily = iprot.readString();
              this.__isset.columnFamily = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("get_superColumn_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.tablename != null) {
        field.name = "tablename";
        field.type = TType.STRING;
        field.id = -1;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.tablename);
        oprot.writeFieldEnd();
      }
      if (this.key != null) {
        field.name = "key";
        field.type = TType.STRING;
        field.id = -2;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      if (this.columnFamily != null) {
        field.name = "columnFamily";
        field.type = TType.STRING;
        field.id = -3;
        oprot.writeFieldBegin(field);
        oprot.writeString(this.columnFamily);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("get_superColumn_args(");
      sb.append("tablename:");
      sb.append(this.tablename);
      sb.append(",key:");
      sb.append(this.key);
      sb.append(",columnFamily:");
      sb.append(this.columnFamily);
      sb.append(")");
      return sb.toString();
    }

  }

  public static class get_superColumn_result implements TBase, java.io.Serializable   {
    public superColumn_t success;

    public final Isset __isset = new Isset();
    public static final class Isset {
      public boolean success = false;
    }

    public get_superColumn_result() {
    }

    public get_superColumn_result(
      superColumn_t success)
    {
      this();
      this.success = success;
      this.__isset.success = true;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.STRUCT) {
              this.success = new superColumn_t();
              this.success.read(iprot);
              this.__isset.success = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("get_superColumn_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.name = "success";
          field.type = TType.STRUCT;
          field.id = 0;
          oprot.writeFieldBegin(field);
          this.success.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("get_superColumn_result(");
      sb.append("success:");
      sb.append(this.success.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class batch_insert_superColumn_args implements TBase, java.io.Serializable   {
    public batch_mutation_super_t batchMutationSuper;

    public final Isset __isset = new Isset();
    public static final class Isset {
      public boolean batchMutationSuper = false;
    }

    public batch_insert_superColumn_args() {
    }

    public batch_insert_superColumn_args(
      batch_mutation_super_t batchMutationSuper)
    {
      this();
      this.batchMutationSuper = batchMutationSuper;
      this.__isset.batchMutationSuper = true;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id)
        {
          case -1:
            if (field.type == TType.STRUCT) {
              this.batchMutationSuper = new batch_mutation_super_t();
              this.batchMutationSuper.read(iprot);
              this.__isset.batchMutationSuper = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("batch_insert_superColumn_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.batchMutationSuper != null) {
        field.name = "batchMutationSuper";
        field.type = TType.STRUCT;
        field.id = -1;
        oprot.writeFieldBegin(field);
        this.batchMutationSuper.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("batch_insert_superColumn_args(");
      sb.append("batchMutationSuper:");
      sb.append(this.batchMutationSuper.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class batch_insert_superColumn_blocking_args implements TBase, java.io.Serializable   {
    public batch_mutation_super_t batchMutationSuper;

    public final Isset __isset = new Isset();
    public static final class Isset {
      public boolean batchMutationSuper = false;
    }

    public batch_insert_superColumn_blocking_args() {
    }

    public batch_insert_superColumn_blocking_args(
      batch_mutation_super_t batchMutationSuper)
    {
      this();
      this.batchMutationSuper = batchMutationSuper;
      this.__isset.batchMutationSuper = true;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id)
        {
          case -1:
            if (field.type == TType.STRUCT) {
              this.batchMutationSuper = new batch_mutation_super_t();
              this.batchMutationSuper.read(iprot);
              this.__isset.batchMutationSuper = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("batch_insert_superColumn_blocking_args");
      oprot.writeStructBegin(struct);
      TField field = new TField();
      if (this.batchMutationSuper != null) {
        field.name = "batchMutationSuper";
        field.type = TType.STRUCT;
        field.id = -1;
        oprot.writeFieldBegin(field);
        this.batchMutationSuper.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("batch_insert_superColumn_blocking_args(");
      sb.append("batchMutationSuper:");
      sb.append(this.batchMutationSuper.toString());
      sb.append(")");
      return sb.toString();
    }

  }

  public static class batch_insert_superColumn_blocking_result implements TBase, java.io.Serializable   {
    public boolean success;

    public final Isset __isset = new Isset();
    public static final class Isset {
      public boolean success = false;
    }

    public batch_insert_superColumn_blocking_result() {
    }

    public batch_insert_superColumn_blocking_result(
      boolean success)
    {
      this();
      this.success = success;
      this.__isset.success = true;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) {
          break;
        }
        switch (field.id)
        {
          case 0:
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              this.__isset.success = true;
            } else {
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
    }

    public void write(TProtocol oprot) throws TException {
      TStruct struct = new TStruct("batch_insert_superColumn_blocking_result");
      oprot.writeStructBegin(struct);
      TField field = new TField();

      if (this.__isset.success) {
        field.name = "success";
        field.type = TType.BOOL;
        field.id = 0;
        oprot.writeFieldBegin(field);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuilder sb = new StringBuilder("batch_insert_superColumn_blocking_result(");
      sb.append("success:");
      sb.append(this.success);
      sb.append(")");
      return sb.toString();
    }

  }

}
