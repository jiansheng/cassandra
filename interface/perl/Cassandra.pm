#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use Types;
use FacebookService;

# HELPER FUNCTIONS AND STRUCTURES

package Cassandra_get_slice_args;
use base('Class::Accessor');
Cassandra_get_slice_args->mk_accessors( qw( tablename key columnFamily_column start count ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{tablename} = undef;
$self->{key} = undef;
$self->{columnFamily_column} = undef;
$self->{start} = -1;
$self->{count} = -1;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{tablename}) {
      $self->{tablename} = $vals->{tablename};
    }
    if (defined $vals->{key}) {
      $self->{key} = $vals->{key};
    }
    if (defined $vals->{columnFamily_column}) {
      $self->{columnFamily_column} = $vals->{columnFamily_column};
    }
    if (defined $vals->{start}) {
      $self->{start} = $vals->{start};
    }
    if (defined $vals->{count}) {
      $self->{count} = $vals->{count};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Cassandra_get_slice_args';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^-1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{tablename});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^-2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{key});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^-3$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{columnFamily_column});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^-4$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{start});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^-5$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{count});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Cassandra_get_slice_args');
  if (defined $self->{tablename}) {
    $xfer += $output->writeFieldBegin('tablename', TType::STRING, -1);
    $xfer += $output->writeString($self->{tablename});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{key}) {
    $xfer += $output->writeFieldBegin('key', TType::STRING, -2);
    $xfer += $output->writeString($self->{key});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{columnFamily_column}) {
    $xfer += $output->writeFieldBegin('columnFamily_column', TType::STRING, -3);
    $xfer += $output->writeString($self->{columnFamily_column});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{start}) {
    $xfer += $output->writeFieldBegin('start', TType::I32, -4);
    $xfer += $output->writeI32($self->{start});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{count}) {
    $xfer += $output->writeFieldBegin('count', TType::I32, -5);
    $xfer += $output->writeI32($self->{count});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Cassandra_get_slice_result;
use base('Class::Accessor');
Cassandra_get_slice_result->mk_accessors( qw( success ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Cassandra_get_slice_result';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size39 = 0;
          $self->{success} = [];
          my $_etype42 = 0;
          $xfer += $input->readListBegin(\$_etype42, \$_size39);
          for (my $_i43 = 0; $_i43 < $_size39; ++$_i43)
          {
            my $elem44 = undef;
            $elem44 = new column_t();
            $xfer += $elem44->read($input);
            push(@{$self->{success}},$elem44);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Cassandra_get_slice_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
    {
      $output->writeListBegin(TType::STRUCT, scalar(@{$self->{success}}));
      {
        foreach my $iter45 (@{$self->{success}}) 
        {
          $xfer += ${iter45}->write($output);
        }
      }
      $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Cassandra_get_column_args;
use base('Class::Accessor');
Cassandra_get_column_args->mk_accessors( qw( tablename key columnFamily_column ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{tablename} = undef;
$self->{key} = undef;
$self->{columnFamily_column} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{tablename}) {
      $self->{tablename} = $vals->{tablename};
    }
    if (defined $vals->{key}) {
      $self->{key} = $vals->{key};
    }
    if (defined $vals->{columnFamily_column}) {
      $self->{columnFamily_column} = $vals->{columnFamily_column};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Cassandra_get_column_args';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^-1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{tablename});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^-2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{key});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^-3$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{columnFamily_column});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Cassandra_get_column_args');
  if (defined $self->{tablename}) {
    $xfer += $output->writeFieldBegin('tablename', TType::STRING, -1);
    $xfer += $output->writeString($self->{tablename});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{key}) {
    $xfer += $output->writeFieldBegin('key', TType::STRING, -2);
    $xfer += $output->writeString($self->{key});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{columnFamily_column}) {
    $xfer += $output->writeFieldBegin('columnFamily_column', TType::STRING, -3);
    $xfer += $output->writeString($self->{columnFamily_column});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Cassandra_get_column_result;
use base('Class::Accessor');
Cassandra_get_column_result->mk_accessors( qw( success ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Cassandra_get_column_result';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new column_t();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Cassandra_get_column_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Cassandra_get_column_count_args;
use base('Class::Accessor');
Cassandra_get_column_count_args->mk_accessors( qw( tablename key columnFamily_column ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{tablename} = undef;
$self->{key} = undef;
$self->{columnFamily_column} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{tablename}) {
      $self->{tablename} = $vals->{tablename};
    }
    if (defined $vals->{key}) {
      $self->{key} = $vals->{key};
    }
    if (defined $vals->{columnFamily_column}) {
      $self->{columnFamily_column} = $vals->{columnFamily_column};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Cassandra_get_column_count_args';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^-1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{tablename});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^-2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{key});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^-3$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{columnFamily_column});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Cassandra_get_column_count_args');
  if (defined $self->{tablename}) {
    $xfer += $output->writeFieldBegin('tablename', TType::STRING, -1);
    $xfer += $output->writeString($self->{tablename});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{key}) {
    $xfer += $output->writeFieldBegin('key', TType::STRING, -2);
    $xfer += $output->writeString($self->{key});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{columnFamily_column}) {
    $xfer += $output->writeFieldBegin('columnFamily_column', TType::STRING, -3);
    $xfer += $output->writeString($self->{columnFamily_column});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Cassandra_get_column_count_result;
use base('Class::Accessor');
Cassandra_get_column_count_result->mk_accessors( qw( success ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Cassandra_get_column_count_result';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Cassandra_get_column_count_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::I32, 0);
    $xfer += $output->writeI32($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Cassandra_insert_args;
use base('Class::Accessor');
Cassandra_insert_args->mk_accessors( qw( tablename key columnFamily_column cellData timestamp ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{tablename} = undef;
$self->{key} = undef;
$self->{columnFamily_column} = undef;
$self->{cellData} = undef;
$self->{timestamp} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{tablename}) {
      $self->{tablename} = $vals->{tablename};
    }
    if (defined $vals->{key}) {
      $self->{key} = $vals->{key};
    }
    if (defined $vals->{columnFamily_column}) {
      $self->{columnFamily_column} = $vals->{columnFamily_column};
    }
    if (defined $vals->{cellData}) {
      $self->{cellData} = $vals->{cellData};
    }
    if (defined $vals->{timestamp}) {
      $self->{timestamp} = $vals->{timestamp};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Cassandra_insert_args';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^-1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{tablename});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^-2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{key});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^-3$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{columnFamily_column});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^-4$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{cellData});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^-5$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{timestamp});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Cassandra_insert_args');
  if (defined $self->{tablename}) {
    $xfer += $output->writeFieldBegin('tablename', TType::STRING, -1);
    $xfer += $output->writeString($self->{tablename});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{key}) {
    $xfer += $output->writeFieldBegin('key', TType::STRING, -2);
    $xfer += $output->writeString($self->{key});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{columnFamily_column}) {
    $xfer += $output->writeFieldBegin('columnFamily_column', TType::STRING, -3);
    $xfer += $output->writeString($self->{columnFamily_column});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{cellData}) {
    $xfer += $output->writeFieldBegin('cellData', TType::STRING, -4);
    $xfer += $output->writeString($self->{cellData});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{timestamp}) {
    $xfer += $output->writeFieldBegin('timestamp', TType::I32, -5);
    $xfer += $output->writeI32($self->{timestamp});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Cassandra_insert_result;
use base('Class::Accessor');
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
return bless($self,$classname);
}

sub getName {
  return 'Cassandra_insert_result';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Cassandra_insert_result');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Cassandra_batch_insert_args;
use base('Class::Accessor');
Cassandra_batch_insert_args->mk_accessors( qw( batchMutation ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{batchMutation} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{batchMutation}) {
      $self->{batchMutation} = $vals->{batchMutation};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Cassandra_batch_insert_args';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^-1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{batchMutation} = new batch_mutation_t();
        $xfer += $self->{batchMutation}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Cassandra_batch_insert_args');
  if (defined $self->{batchMutation}) {
    $xfer += $output->writeFieldBegin('batchMutation', TType::STRUCT, -1);
    $xfer += $self->{batchMutation}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Cassandra_batch_insert_result;
use base('Class::Accessor');
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
return bless($self,$classname);
}

sub getName {
  return 'Cassandra_batch_insert_result';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Cassandra_batch_insert_result');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Cassandra_batch_insert_blocking_args;
use base('Class::Accessor');
Cassandra_batch_insert_blocking_args->mk_accessors( qw( batchMutation ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{batchMutation} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{batchMutation}) {
      $self->{batchMutation} = $vals->{batchMutation};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Cassandra_batch_insert_blocking_args';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^-1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{batchMutation} = new batch_mutation_t();
        $xfer += $self->{batchMutation}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Cassandra_batch_insert_blocking_args');
  if (defined $self->{batchMutation}) {
    $xfer += $output->writeFieldBegin('batchMutation', TType::STRUCT, -1);
    $xfer += $self->{batchMutation}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Cassandra_batch_insert_blocking_result;
use base('Class::Accessor');
Cassandra_batch_insert_blocking_result->mk_accessors( qw( success ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Cassandra_batch_insert_blocking_result';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Cassandra_batch_insert_blocking_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
    $xfer += $output->writeBool($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Cassandra_remove_args;
use base('Class::Accessor');
Cassandra_remove_args->mk_accessors( qw( tablename key columnFamily_column ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{tablename} = undef;
$self->{key} = undef;
$self->{columnFamily_column} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{tablename}) {
      $self->{tablename} = $vals->{tablename};
    }
    if (defined $vals->{key}) {
      $self->{key} = $vals->{key};
    }
    if (defined $vals->{columnFamily_column}) {
      $self->{columnFamily_column} = $vals->{columnFamily_column};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Cassandra_remove_args';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^-1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{tablename});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^-2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{key});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^-3$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{columnFamily_column});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Cassandra_remove_args');
  if (defined $self->{tablename}) {
    $xfer += $output->writeFieldBegin('tablename', TType::STRING, -1);
    $xfer += $output->writeString($self->{tablename});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{key}) {
    $xfer += $output->writeFieldBegin('key', TType::STRING, -2);
    $xfer += $output->writeString($self->{key});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{columnFamily_column}) {
    $xfer += $output->writeFieldBegin('columnFamily_column', TType::STRING, -3);
    $xfer += $output->writeString($self->{columnFamily_column});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Cassandra_remove_result;
use base('Class::Accessor');
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
return bless($self,$classname);
}

sub getName {
  return 'Cassandra_remove_result';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Cassandra_remove_result');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Cassandra_get_slice_super_args;
use base('Class::Accessor');
Cassandra_get_slice_super_args->mk_accessors( qw( tablename key columnFamily_superColumnName start count ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{tablename} = undef;
$self->{key} = undef;
$self->{columnFamily_superColumnName} = undef;
$self->{start} = -1;
$self->{count} = -1;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{tablename}) {
      $self->{tablename} = $vals->{tablename};
    }
    if (defined $vals->{key}) {
      $self->{key} = $vals->{key};
    }
    if (defined $vals->{columnFamily_superColumnName}) {
      $self->{columnFamily_superColumnName} = $vals->{columnFamily_superColumnName};
    }
    if (defined $vals->{start}) {
      $self->{start} = $vals->{start};
    }
    if (defined $vals->{count}) {
      $self->{count} = $vals->{count};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Cassandra_get_slice_super_args';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^-1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{tablename});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^-2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{key});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^-3$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{columnFamily_superColumnName});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^-4$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{start});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^-5$/ && do{      if ($ftype == TType::I32) {
        $xfer += $input->readI32(\$self->{count});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Cassandra_get_slice_super_args');
  if (defined $self->{tablename}) {
    $xfer += $output->writeFieldBegin('tablename', TType::STRING, -1);
    $xfer += $output->writeString($self->{tablename});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{key}) {
    $xfer += $output->writeFieldBegin('key', TType::STRING, -2);
    $xfer += $output->writeString($self->{key});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{columnFamily_superColumnName}) {
    $xfer += $output->writeFieldBegin('columnFamily_superColumnName', TType::STRING, -3);
    $xfer += $output->writeString($self->{columnFamily_superColumnName});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{start}) {
    $xfer += $output->writeFieldBegin('start', TType::I32, -4);
    $xfer += $output->writeI32($self->{start});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{count}) {
    $xfer += $output->writeFieldBegin('count', TType::I32, -5);
    $xfer += $output->writeI32($self->{count});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Cassandra_get_slice_super_result;
use base('Class::Accessor');
Cassandra_get_slice_super_result->mk_accessors( qw( success ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Cassandra_get_slice_super_result';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size46 = 0;
          $self->{success} = [];
          my $_etype49 = 0;
          $xfer += $input->readListBegin(\$_etype49, \$_size46);
          for (my $_i50 = 0; $_i50 < $_size46; ++$_i50)
          {
            my $elem51 = undef;
            $elem51 = new superColumn_t();
            $xfer += $elem51->read($input);
            push(@{$self->{success}},$elem51);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Cassandra_get_slice_super_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::LIST, 0);
    {
      $output->writeListBegin(TType::STRUCT, scalar(@{$self->{success}}));
      {
        foreach my $iter52 (@{$self->{success}}) 
        {
          $xfer += ${iter52}->write($output);
        }
      }
      $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Cassandra_get_superColumn_args;
use base('Class::Accessor');
Cassandra_get_superColumn_args->mk_accessors( qw( tablename key columnFamily ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{tablename} = undef;
$self->{key} = undef;
$self->{columnFamily} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{tablename}) {
      $self->{tablename} = $vals->{tablename};
    }
    if (defined $vals->{key}) {
      $self->{key} = $vals->{key};
    }
    if (defined $vals->{columnFamily}) {
      $self->{columnFamily} = $vals->{columnFamily};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Cassandra_get_superColumn_args';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^-1$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{tablename});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^-2$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{key});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^-3$/ && do{      if ($ftype == TType::STRING) {
        $xfer += $input->readString(\$self->{columnFamily});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Cassandra_get_superColumn_args');
  if (defined $self->{tablename}) {
    $xfer += $output->writeFieldBegin('tablename', TType::STRING, -1);
    $xfer += $output->writeString($self->{tablename});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{key}) {
    $xfer += $output->writeFieldBegin('key', TType::STRING, -2);
    $xfer += $output->writeString($self->{key});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{columnFamily}) {
    $xfer += $output->writeFieldBegin('columnFamily', TType::STRING, -3);
    $xfer += $output->writeString($self->{columnFamily});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Cassandra_get_superColumn_result;
use base('Class::Accessor');
Cassandra_get_superColumn_result->mk_accessors( qw( success ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Cassandra_get_superColumn_result';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{success} = new superColumn_t();
        $xfer += $self->{success}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Cassandra_get_superColumn_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
    $xfer += $self->{success}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Cassandra_batch_insert_superColumn_args;
use base('Class::Accessor');
Cassandra_batch_insert_superColumn_args->mk_accessors( qw( batchMutationSuper ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{batchMutationSuper} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{batchMutationSuper}) {
      $self->{batchMutationSuper} = $vals->{batchMutationSuper};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Cassandra_batch_insert_superColumn_args';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^-1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{batchMutationSuper} = new batch_mutation_super_t();
        $xfer += $self->{batchMutationSuper}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Cassandra_batch_insert_superColumn_args');
  if (defined $self->{batchMutationSuper}) {
    $xfer += $output->writeFieldBegin('batchMutationSuper', TType::STRUCT, -1);
    $xfer += $self->{batchMutationSuper}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Cassandra_batch_insert_superColumn_result;
use base('Class::Accessor');
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
return bless($self,$classname);
}

sub getName {
  return 'Cassandra_batch_insert_superColumn_result';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Cassandra_batch_insert_superColumn_result');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Cassandra_batch_insert_superColumn_blocking_args;
use base('Class::Accessor');
Cassandra_batch_insert_superColumn_blocking_args->mk_accessors( qw( batchMutationSuper ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{batchMutationSuper} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{batchMutationSuper}) {
      $self->{batchMutationSuper} = $vals->{batchMutationSuper};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Cassandra_batch_insert_superColumn_blocking_args';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^-1$/ && do{      if ($ftype == TType::STRUCT) {
        $self->{batchMutationSuper} = new batch_mutation_super_t();
        $xfer += $self->{batchMutationSuper}->read($input);
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Cassandra_batch_insert_superColumn_blocking_args');
  if (defined $self->{batchMutationSuper}) {
    $xfer += $output->writeFieldBegin('batchMutationSuper', TType::STRUCT, -1);
    $xfer += $self->{batchMutationSuper}->write($output);
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package Cassandra_batch_insert_superColumn_blocking_result;
use base('Class::Accessor');
Cassandra_batch_insert_superColumn_blocking_result->mk_accessors( qw( success ) );
sub new {
my $classname = shift;
my $self      = {};
my $vals      = shift || {};
$self->{success} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{success}) {
      $self->{success} = $vals->{success};
    }
  }
return bless($self,$classname);
}

sub getName {
  return 'Cassandra_batch_insert_superColumn_blocking_result';
}

sub read {
  my $self  = shift;
  my $input = shift;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^0$/ && do{      if ($ftype == TType::BOOL) {
        $xfer += $input->readBool(\$self->{success});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my $self   = shift;
  my $output = shift;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('Cassandra_batch_insert_superColumn_blocking_result');
  if (defined $self->{success}) {
    $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
    $xfer += $output->writeBool($self->{success});
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package CassandraIf;
use base('FacebookServiceIf');
sub get_slice{
  my $self = shift;
  my $tablename = shift;
  my $key = shift;
  my $columnFamily_column = shift;
  my $start = shift;
  my $count = shift;

  die 'implement interface';
}
sub get_column{
  my $self = shift;
  my $tablename = shift;
  my $key = shift;
  my $columnFamily_column = shift;

  die 'implement interface';
}
sub get_column_count{
  my $self = shift;
  my $tablename = shift;
  my $key = shift;
  my $columnFamily_column = shift;

  die 'implement interface';
}
sub insert{
  my $self = shift;
  my $tablename = shift;
  my $key = shift;
  my $columnFamily_column = shift;
  my $cellData = shift;
  my $timestamp = shift;

  die 'implement interface';
}
sub batch_insert{
  my $self = shift;
  my $batchMutation = shift;

  die 'implement interface';
}
sub batch_insert_blocking{
  my $self = shift;
  my $batchMutation = shift;

  die 'implement interface';
}
sub remove{
  my $self = shift;
  my $tablename = shift;
  my $key = shift;
  my $columnFamily_column = shift;

  die 'implement interface';
}
sub get_slice_super{
  my $self = shift;
  my $tablename = shift;
  my $key = shift;
  my $columnFamily_superColumnName = shift;
  my $start = shift;
  my $count = shift;

  die 'implement interface';
}
sub get_superColumn{
  my $self = shift;
  my $tablename = shift;
  my $key = shift;
  my $columnFamily = shift;

  die 'implement interface';
}
sub batch_insert_superColumn{
  my $self = shift;
  my $batchMutationSuper = shift;

  die 'implement interface';
}
sub batch_insert_superColumn_blocking{
  my $self = shift;
  my $batchMutationSuper = shift;

  die 'implement interface';
}
package CassandraRest;
use base('FacebookServiceRest');
sub get_slice{
  my $self = shift;
  my $request = shift;

  my $tablename = ($request->{'tablename'}) ? $request->{'tablename'} : undef;
  my $key = ($request->{'key'}) ? $request->{'key'} : undef;
  my $columnFamily_column = ($request->{'columnFamily_column'}) ? $request->{'columnFamily_column'} : undef;
  my $start = ($request->{'start'}) ? $request->{'start'} : undef;
  my $count = ($request->{'count'}) ? $request->{'count'} : undef;
  return $self->{impl}->get_slice($tablename, $key, $columnFamily_column, $start, $count);
}

sub get_column{
  my $self = shift;
  my $request = shift;

  my $tablename = ($request->{'tablename'}) ? $request->{'tablename'} : undef;
  my $key = ($request->{'key'}) ? $request->{'key'} : undef;
  my $columnFamily_column = ($request->{'columnFamily_column'}) ? $request->{'columnFamily_column'} : undef;
  return $self->{impl}->get_column($tablename, $key, $columnFamily_column);
}

sub get_column_count{
  my $self = shift;
  my $request = shift;

  my $tablename = ($request->{'tablename'}) ? $request->{'tablename'} : undef;
  my $key = ($request->{'key'}) ? $request->{'key'} : undef;
  my $columnFamily_column = ($request->{'columnFamily_column'}) ? $request->{'columnFamily_column'} : undef;
  return $self->{impl}->get_column_count($tablename, $key, $columnFamily_column);
}

sub insert{
  my $self = shift;
  my $request = shift;

  my $tablename = ($request->{'tablename'}) ? $request->{'tablename'} : undef;
  my $key = ($request->{'key'}) ? $request->{'key'} : undef;
  my $columnFamily_column = ($request->{'columnFamily_column'}) ? $request->{'columnFamily_column'} : undef;
  my $cellData = ($request->{'cellData'}) ? $request->{'cellData'} : undef;
  my $timestamp = ($request->{'timestamp'}) ? $request->{'timestamp'} : undef;
  return $self->{impl}->insert($tablename, $key, $columnFamily_column, $cellData, $timestamp);
}

sub batch_insert{
  my $self = shift;
  my $request = shift;

  my $batchMutation = ($request->{'batchMutation'}) ? $request->{'batchMutation'} : undef;
  return $self->{impl}->batch_insert($batchMutation);
}

sub batch_insert_blocking{
  my $self = shift;
  my $request = shift;

  my $batchMutation = ($request->{'batchMutation'}) ? $request->{'batchMutation'} : undef;
  return $self->{impl}->batch_insert_blocking($batchMutation);
}

sub remove{
  my $self = shift;
  my $request = shift;

  my $tablename = ($request->{'tablename'}) ? $request->{'tablename'} : undef;
  my $key = ($request->{'key'}) ? $request->{'key'} : undef;
  my $columnFamily_column = ($request->{'columnFamily_column'}) ? $request->{'columnFamily_column'} : undef;
  return $self->{impl}->remove($tablename, $key, $columnFamily_column);
}

sub get_slice_super{
  my $self = shift;
  my $request = shift;

  my $tablename = ($request->{'tablename'}) ? $request->{'tablename'} : undef;
  my $key = ($request->{'key'}) ? $request->{'key'} : undef;
  my $columnFamily_superColumnName = ($request->{'columnFamily_superColumnName'}) ? $request->{'columnFamily_superColumnName'} : undef;
  my $start = ($request->{'start'}) ? $request->{'start'} : undef;
  my $count = ($request->{'count'}) ? $request->{'count'} : undef;
  return $self->{impl}->get_slice_super($tablename, $key, $columnFamily_superColumnName, $start, $count);
}

sub get_superColumn{
  my $self = shift;
  my $request = shift;

  my $tablename = ($request->{'tablename'}) ? $request->{'tablename'} : undef;
  my $key = ($request->{'key'}) ? $request->{'key'} : undef;
  my $columnFamily = ($request->{'columnFamily'}) ? $request->{'columnFamily'} : undef;
  return $self->{impl}->get_superColumn($tablename, $key, $columnFamily);
}

sub batch_insert_superColumn{
  my $self = shift;
  my $request = shift;

  my $batchMutationSuper = ($request->{'batchMutationSuper'}) ? $request->{'batchMutationSuper'} : undef;
  return $self->{impl}->batch_insert_superColumn($batchMutationSuper);
}

sub batch_insert_superColumn_blocking{
  my $self = shift;
  my $request = shift;

  my $batchMutationSuper = ($request->{'batchMutationSuper'}) ? $request->{'batchMutationSuper'} : undef;
  return $self->{impl}->batch_insert_superColumn_blocking($batchMutationSuper);
}

package CassandraClient;
use base('FacebookServiceClient');
use base('CassandraIf');
sub new {
  my $classname = shift;
  my $input     = shift;
  my $output    = shift;
  my $self      = {};
    $self = $classname->SUPER::new($input, $output);
  return bless($self,$classname);
}

sub get_slice{
  my $self = shift;
  my $tablename = shift;
  my $key = shift;
  my $columnFamily_column = shift;
  my $start = shift;
  my $count = shift;

    $self->send_get_slice($tablename, $key, $columnFamily_column, $start, $count);
  return $self->recv_get_slice();
}

sub send_get_slice{
  my $self = shift;
  my $tablename = shift;
  my $key = shift;
  my $columnFamily_column = shift;
  my $start = shift;
  my $count = shift;

  $self->{output}->writeMessageBegin('get_slice', TMessageType::CALL, $self->{seqid});
  my $args = new Cassandra_get_slice_args();
  $args->{tablename} = $tablename;
  $args->{key} = $key;
  $args->{columnFamily_column} = $columnFamily_column;
  $args->{start} = $start;
  $args->{count} = $count;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_slice{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new Cassandra_get_slice_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "get_slice failed: unknown result";
}
sub get_column{
  my $self = shift;
  my $tablename = shift;
  my $key = shift;
  my $columnFamily_column = shift;

    $self->send_get_column($tablename, $key, $columnFamily_column);
  return $self->recv_get_column();
}

sub send_get_column{
  my $self = shift;
  my $tablename = shift;
  my $key = shift;
  my $columnFamily_column = shift;

  $self->{output}->writeMessageBegin('get_column', TMessageType::CALL, $self->{seqid});
  my $args = new Cassandra_get_column_args();
  $args->{tablename} = $tablename;
  $args->{key} = $key;
  $args->{columnFamily_column} = $columnFamily_column;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_column{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new Cassandra_get_column_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "get_column failed: unknown result";
}
sub get_column_count{
  my $self = shift;
  my $tablename = shift;
  my $key = shift;
  my $columnFamily_column = shift;

    $self->send_get_column_count($tablename, $key, $columnFamily_column);
  return $self->recv_get_column_count();
}

sub send_get_column_count{
  my $self = shift;
  my $tablename = shift;
  my $key = shift;
  my $columnFamily_column = shift;

  $self->{output}->writeMessageBegin('get_column_count', TMessageType::CALL, $self->{seqid});
  my $args = new Cassandra_get_column_count_args();
  $args->{tablename} = $tablename;
  $args->{key} = $key;
  $args->{columnFamily_column} = $columnFamily_column;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_column_count{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new Cassandra_get_column_count_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "get_column_count failed: unknown result";
}
sub insert{
  my $self = shift;
  my $tablename = shift;
  my $key = shift;
  my $columnFamily_column = shift;
  my $cellData = shift;
  my $timestamp = shift;

    $self->send_insert($tablename, $key, $columnFamily_column, $cellData, $timestamp);
}

sub send_insert{
  my $self = shift;
  my $tablename = shift;
  my $key = shift;
  my $columnFamily_column = shift;
  my $cellData = shift;
  my $timestamp = shift;

  $self->{output}->writeMessageBegin('insert', TMessageType::CALL, $self->{seqid});
  my $args = new Cassandra_insert_args();
  $args->{tablename} = $tablename;
  $args->{key} = $key;
  $args->{columnFamily_column} = $columnFamily_column;
  $args->{cellData} = $cellData;
  $args->{timestamp} = $timestamp;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}
sub batch_insert{
  my $self = shift;
  my $batchMutation = shift;

    $self->send_batch_insert($batchMutation);
}

sub send_batch_insert{
  my $self = shift;
  my $batchMutation = shift;

  $self->{output}->writeMessageBegin('batch_insert', TMessageType::CALL, $self->{seqid});
  my $args = new Cassandra_batch_insert_args();
  $args->{batchMutation} = $batchMutation;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}
sub batch_insert_blocking{
  my $self = shift;
  my $batchMutation = shift;

    $self->send_batch_insert_blocking($batchMutation);
  return $self->recv_batch_insert_blocking();
}

sub send_batch_insert_blocking{
  my $self = shift;
  my $batchMutation = shift;

  $self->{output}->writeMessageBegin('batch_insert_blocking', TMessageType::CALL, $self->{seqid});
  my $args = new Cassandra_batch_insert_blocking_args();
  $args->{batchMutation} = $batchMutation;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_batch_insert_blocking{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new Cassandra_batch_insert_blocking_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "batch_insert_blocking failed: unknown result";
}
sub remove{
  my $self = shift;
  my $tablename = shift;
  my $key = shift;
  my $columnFamily_column = shift;

    $self->send_remove($tablename, $key, $columnFamily_column);
}

sub send_remove{
  my $self = shift;
  my $tablename = shift;
  my $key = shift;
  my $columnFamily_column = shift;

  $self->{output}->writeMessageBegin('remove', TMessageType::CALL, $self->{seqid});
  my $args = new Cassandra_remove_args();
  $args->{tablename} = $tablename;
  $args->{key} = $key;
  $args->{columnFamily_column} = $columnFamily_column;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}
sub get_slice_super{
  my $self = shift;
  my $tablename = shift;
  my $key = shift;
  my $columnFamily_superColumnName = shift;
  my $start = shift;
  my $count = shift;

    $self->send_get_slice_super($tablename, $key, $columnFamily_superColumnName, $start, $count);
  return $self->recv_get_slice_super();
}

sub send_get_slice_super{
  my $self = shift;
  my $tablename = shift;
  my $key = shift;
  my $columnFamily_superColumnName = shift;
  my $start = shift;
  my $count = shift;

  $self->{output}->writeMessageBegin('get_slice_super', TMessageType::CALL, $self->{seqid});
  my $args = new Cassandra_get_slice_super_args();
  $args->{tablename} = $tablename;
  $args->{key} = $key;
  $args->{columnFamily_superColumnName} = $columnFamily_superColumnName;
  $args->{start} = $start;
  $args->{count} = $count;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_slice_super{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new Cassandra_get_slice_super_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "get_slice_super failed: unknown result";
}
sub get_superColumn{
  my $self = shift;
  my $tablename = shift;
  my $key = shift;
  my $columnFamily = shift;

    $self->send_get_superColumn($tablename, $key, $columnFamily);
  return $self->recv_get_superColumn();
}

sub send_get_superColumn{
  my $self = shift;
  my $tablename = shift;
  my $key = shift;
  my $columnFamily = shift;

  $self->{output}->writeMessageBegin('get_superColumn', TMessageType::CALL, $self->{seqid});
  my $args = new Cassandra_get_superColumn_args();
  $args->{tablename} = $tablename;
  $args->{key} = $key;
  $args->{columnFamily} = $columnFamily;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_get_superColumn{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new Cassandra_get_superColumn_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "get_superColumn failed: unknown result";
}
sub batch_insert_superColumn{
  my $self = shift;
  my $batchMutationSuper = shift;

    $self->send_batch_insert_superColumn($batchMutationSuper);
}

sub send_batch_insert_superColumn{
  my $self = shift;
  my $batchMutationSuper = shift;

  $self->{output}->writeMessageBegin('batch_insert_superColumn', TMessageType::CALL, $self->{seqid});
  my $args = new Cassandra_batch_insert_superColumn_args();
  $args->{batchMutationSuper} = $batchMutationSuper;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}
sub batch_insert_superColumn_blocking{
  my $self = shift;
  my $batchMutationSuper = shift;

    $self->send_batch_insert_superColumn_blocking($batchMutationSuper);
  return $self->recv_batch_insert_superColumn_blocking();
}

sub send_batch_insert_superColumn_blocking{
  my $self = shift;
  my $batchMutationSuper = shift;

  $self->{output}->writeMessageBegin('batch_insert_superColumn_blocking', TMessageType::CALL, $self->{seqid});
  my $args = new Cassandra_batch_insert_superColumn_blocking_args();
  $args->{batchMutationSuper} = $batchMutationSuper;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}

sub recv_batch_insert_superColumn_blocking{
  my $self = shift;

  my $rseqid = 0;
  my $fname;
  my $mtype = 0;

  $self->{input}->readMessageBegin(\$fname, \$mtype, \$rseqid);
  if ($mtype == TMessageType::EXCEPTION) {
    my $x = new TApplicationException();
    $x->read($self->{input});
    $self->{input}->readMessageEnd();
    die $x;
  }
  my $result = new Cassandra_batch_insert_superColumn_blocking_result();
  $result->read($self->{input});
  $self->{input}->readMessageEnd();

  if (defined $result->{success} ) {
    return $result->{success};
  }
  die "batch_insert_superColumn_blocking failed: unknown result";
}
package CassandraProcessor;
use base('FacebookServiceProcessor');
sub process {
    my $self   = shift;
    my $input  = shift;
    my $output = shift;
    my $rseqid = 0;
    my $fname  = undef;
    my $mtype  = 0;

    $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
    my $methodname = 'process_'.$fname;
    if (!method_exists($self, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $self->$methodname($rseqid, $input, $output);
    return 1;
  }

sub process_get_slice{
    my $self = shift;
    my ($seqid, $input, $output); 
    my $args = new Cassandra_get_slice_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new Cassandra_get_slice_result();
    $result->{success} = $self->{handler}->get_slice($args->tablename, $args->key, $args->columnFamily_column, $args->start, $args->count);
      $output->writeMessageBegin('get_slice', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
  }
sub process_get_column{
    my $self = shift;
    my ($seqid, $input, $output); 
    my $args = new Cassandra_get_column_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new Cassandra_get_column_result();
    $result->{success} = $self->{handler}->get_column($args->tablename, $args->key, $args->columnFamily_column);
      $output->writeMessageBegin('get_column', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
  }
sub process_get_column_count{
    my $self = shift;
    my ($seqid, $input, $output); 
    my $args = new Cassandra_get_column_count_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new Cassandra_get_column_count_result();
    $result->{success} = $self->{handler}->get_column_count($args->tablename, $args->key, $args->columnFamily_column);
      $output->writeMessageBegin('get_column_count', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
  }
sub process_insert{
    my $self = shift;
    my ($seqid, $input, $output); 
    my $args = new Cassandra_insert_args();
    $args->read($input);
    $input->readMessageEnd();
    $self->{handler}->insert($args->tablename, $args->key, $args->columnFamily_column, $args->cellData, $args->timestamp);
    return;
  }
sub process_batch_insert{
    my $self = shift;
    my ($seqid, $input, $output); 
    my $args = new Cassandra_batch_insert_args();
    $args->read($input);
    $input->readMessageEnd();
    $self->{handler}->batch_insert($args->batchMutation);
    return;
  }
sub process_batch_insert_blocking{
    my $self = shift;
    my ($seqid, $input, $output); 
    my $args = new Cassandra_batch_insert_blocking_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new Cassandra_batch_insert_blocking_result();
    $result->{success} = $self->{handler}->batch_insert_blocking($args->batchMutation);
      $output->writeMessageBegin('batch_insert_blocking', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
  }
sub process_remove{
    my $self = shift;
    my ($seqid, $input, $output); 
    my $args = new Cassandra_remove_args();
    $args->read($input);
    $input->readMessageEnd();
    $self->{handler}->remove($args->tablename, $args->key, $args->columnFamily_column);
    return;
  }
sub process_get_slice_super{
    my $self = shift;
    my ($seqid, $input, $output); 
    my $args = new Cassandra_get_slice_super_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new Cassandra_get_slice_super_result();
    $result->{success} = $self->{handler}->get_slice_super($args->tablename, $args->key, $args->columnFamily_superColumnName, $args->start, $args->count);
      $output->writeMessageBegin('get_slice_super', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
  }
sub process_get_superColumn{
    my $self = shift;
    my ($seqid, $input, $output); 
    my $args = new Cassandra_get_superColumn_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new Cassandra_get_superColumn_result();
    $result->{success} = $self->{handler}->get_superColumn($args->tablename, $args->key, $args->columnFamily);
      $output->writeMessageBegin('get_superColumn', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
  }
sub process_batch_insert_superColumn{
    my $self = shift;
    my ($seqid, $input, $output); 
    my $args = new Cassandra_batch_insert_superColumn_args();
    $args->read($input);
    $input->readMessageEnd();
    $self->{handler}->batch_insert_superColumn($args->batchMutationSuper);
    return;
  }
sub process_batch_insert_superColumn_blocking{
    my $self = shift;
    my ($seqid, $input, $output); 
    my $args = new Cassandra_batch_insert_superColumn_blocking_args();
    $args->read($input);
    $input->readMessageEnd();
    my $result = new Cassandra_batch_insert_superColumn_blocking_result();
    $result->{success} = $self->{handler}->batch_insert_superColumn_blocking($args->batchMutationSuper);
      $output->writeMessageBegin('batch_insert_superColumn_blocking', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->getTransport()->flush();
  }
1;
