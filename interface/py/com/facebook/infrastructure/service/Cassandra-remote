#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import Cassandra
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '   get_slice(string tablename, string key, string columnFamily_column, i32 start, i32 count)'
  print '  column_t get_column(string tablename, string key, string columnFamily_column)'
  print '  i32 get_column_count(string tablename, string key, string columnFamily_column)'
  print '  void insert_blocking(string tablename, string key, string columnFamily_column, string cellData, i32 timestamp)'
  print '  void insert(string tablename, string key, string columnFamily_column, string cellData, i32 timestamp)'
  print '  void batch_insert(batch_mutation_t batchMutation)'
  print '  bool batch_insert_blocking(batch_mutation_t batchMutation)'
  print '  void remove(string tablename, string key, string columnFamily_column)'
  print '   get_slice_super(string tablename, string key, string columnFamily_superColumnName, i32 start, i32 count)'
  print '  superColumn_t get_superColumn(string tablename, string key, string columnFamily)'
  print '  void batch_insert_superColumn(batch_mutation_super_t batchMutationSuper)'
  print '  bool batch_insert_superColumn_blocking(batch_mutation_super_t batchMutationSuper)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':') 
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':') 
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Cassandra.Client(protocol)
transport.open()

if cmd == 'get_slice':
  if len(args) != 5:
    print 'get_slice requires 5 args'
    sys.exit(1)
  pp.pprint(client.get_slice(args[0],args[1],args[2],eval(args[3]),eval(args[4]),))

elif cmd == 'get_column':
  if len(args) != 3:
    print 'get_column requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_column(args[0],args[1],args[2],))

elif cmd == 'get_column_count':
  if len(args) != 3:
    print 'get_column_count requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_column_count(args[0],args[1],args[2],))

elif cmd == 'insert_blocking':
  if len(args) != 5:
    print 'insert_blocking requires 5 args'
    sys.exit(1)
  pp.pprint(client.insert_blocking(args[0],args[1],args[2],args[3],eval(args[4]),))

elif cmd == 'insert':
  if len(args) != 5:
    print 'insert requires 5 args'
    sys.exit(1)
  pp.pprint(client.insert(args[0],args[1],args[2],args[3],eval(args[4]),))

elif cmd == 'batch_insert':
  if len(args) != 1:
    print 'batch_insert requires 1 args'
    sys.exit(1)
  pp.pprint(client.batch_insert(eval(args[0]),))

elif cmd == 'batch_insert_blocking':
  if len(args) != 1:
    print 'batch_insert_blocking requires 1 args'
    sys.exit(1)
  pp.pprint(client.batch_insert_blocking(eval(args[0]),))

elif cmd == 'remove':
  if len(args) != 3:
    print 'remove requires 3 args'
    sys.exit(1)
  pp.pprint(client.remove(args[0],args[1],args[2],))

elif cmd == 'get_slice_super':
  if len(args) != 5:
    print 'get_slice_super requires 5 args'
    sys.exit(1)
  pp.pprint(client.get_slice_super(args[0],args[1],args[2],eval(args[3]),eval(args[4]),))

elif cmd == 'get_superColumn':
  if len(args) != 3:
    print 'get_superColumn requires 3 args'
    sys.exit(1)
  pp.pprint(client.get_superColumn(args[0],args[1],args[2],))

elif cmd == 'batch_insert_superColumn':
  if len(args) != 1:
    print 'batch_insert_superColumn requires 1 args'
    sys.exit(1)
  pp.pprint(client.batch_insert_superColumn(eval(args[0]),))

elif cmd == 'batch_insert_superColumn_blocking':
  if len(args) != 1:
    print 'batch_insert_superColumn_blocking requires 1 args'
    sys.exit(1)
  pp.pprint(client.batch_insert_superColumn_blocking(eval(args[0]),))

transport.close()
