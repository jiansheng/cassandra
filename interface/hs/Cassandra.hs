-----------------------------------------------------------------
-- Autogenerated by Thrift                                     --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Cassandra where
import Thrift
import Data.Generics
import Control.Exception
import qualified Data.Map as Map
import qualified Data.Set as Set
import Data.Int
import qualified FacebookService
import Cassandra_Types
import qualified Cassandra_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data Get_slice_args = Get_slice_args{f_Get_slice_args_tablename :: Maybe ([Char]),f_Get_slice_args_key :: Maybe ([Char]),f_Get_slice_args_columnFamily_column :: Maybe ([Char]),f_Get_slice_args_start :: Maybe (Int),f_Get_slice_args_count :: Maybe (Int)} deriving (Show,Eq,Ord,Typeable)
write_Get_slice_args oprot rec = do
  writeStructBegin oprot "Get_slice_args"
  case f_Get_slice_args_tablename rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("tablename",T_STRING,-1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Get_slice_args_key rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("key",T_STRING,-2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Get_slice_args_columnFamily_column rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("columnFamily_column",T_STRING,-3)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Get_slice_args_start rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("start",T_I32,-4)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_Get_slice_args_count rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("count",T_I32,-5)
    writeI32 oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Get_slice_args_fields iprot rec = do
  (_,_t55,_id56) <- readFieldBegin iprot
  if _t55 == T_STOP then return rec else
    case _id56 of 
      -1 -> if _t55 == T_STRING then do
        s <- readString iprot
        read_Get_slice_args_fields iprot rec{f_Get_slice_args_tablename=Just s}
        else do
          skip iprot _t55
          read_Get_slice_args_fields iprot rec
      -2 -> if _t55 == T_STRING then do
        s <- readString iprot
        read_Get_slice_args_fields iprot rec{f_Get_slice_args_key=Just s}
        else do
          skip iprot _t55
          read_Get_slice_args_fields iprot rec
      -3 -> if _t55 == T_STRING then do
        s <- readString iprot
        read_Get_slice_args_fields iprot rec{f_Get_slice_args_columnFamily_column=Just s}
        else do
          skip iprot _t55
          read_Get_slice_args_fields iprot rec
      -4 -> if _t55 == T_I32 then do
        s <- readI32 iprot
        read_Get_slice_args_fields iprot rec{f_Get_slice_args_start=Just s}
        else do
          skip iprot _t55
          read_Get_slice_args_fields iprot rec
      -5 -> if _t55 == T_I32 then do
        s <- readI32 iprot
        read_Get_slice_args_fields iprot rec{f_Get_slice_args_count=Just s}
        else do
          skip iprot _t55
          read_Get_slice_args_fields iprot rec
      _ -> do
        skip iprot _t55
        readFieldEnd iprot
        read_Get_slice_args_fields iprot rec
read_Get_slice_args iprot = do
  readStructBegin iprot
  rec <- read_Get_slice_args_fields iprot (Get_slice_args{f_Get_slice_args_tablename=Nothing,f_Get_slice_args_key=Nothing,f_Get_slice_args_columnFamily_column=Nothing,f_Get_slice_args_start=Nothing,f_Get_slice_args_count=Nothing})
  readStructEnd iprot
  return rec
data Get_slice_result = Get_slice_result{f_Get_slice_result_success :: Maybe ([Column_t])} deriving (Show,Eq,Ord,Typeable)
write_Get_slice_result oprot rec = do
  writeStructBegin oprot "Get_slice_result"
  case f_Get_slice_result_success rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_LIST,0)
    (let {f [] = return (); f (_viter59:t) = do {write_Column_t oprot _viter59;f t}} in do {writeListBegin oprot (T_STRUCT,length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Get_slice_result_fields iprot rec = do
  (_,_t61,_id62) <- readFieldBegin iprot
  if _t61 == T_STOP then return rec else
    case _id62 of 
      0 -> if _t61 == T_LIST then do
        s <- (let {f 0 = return []; f n = do {v <- (read_Column_t iprot);r <- f (n-1); return $ v:r}} in do {(_etype66,_size63) <- readListBegin iprot; f _size63})
        read_Get_slice_result_fields iprot rec{f_Get_slice_result_success=Just s}
        else do
          skip iprot _t61
          read_Get_slice_result_fields iprot rec
      _ -> do
        skip iprot _t61
        readFieldEnd iprot
        read_Get_slice_result_fields iprot rec
read_Get_slice_result iprot = do
  readStructBegin iprot
  rec <- read_Get_slice_result_fields iprot (Get_slice_result{f_Get_slice_result_success=Nothing})
  readStructEnd iprot
  return rec
data Get_column_args = Get_column_args{f_Get_column_args_tablename :: Maybe ([Char]),f_Get_column_args_key :: Maybe ([Char]),f_Get_column_args_columnFamily_column :: Maybe ([Char])} deriving (Show,Eq,Ord,Typeable)
write_Get_column_args oprot rec = do
  writeStructBegin oprot "Get_column_args"
  case f_Get_column_args_tablename rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("tablename",T_STRING,-1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Get_column_args_key rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("key",T_STRING,-2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Get_column_args_columnFamily_column rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("columnFamily_column",T_STRING,-3)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Get_column_args_fields iprot rec = do
  (_,_t71,_id72) <- readFieldBegin iprot
  if _t71 == T_STOP then return rec else
    case _id72 of 
      -1 -> if _t71 == T_STRING then do
        s <- readString iprot
        read_Get_column_args_fields iprot rec{f_Get_column_args_tablename=Just s}
        else do
          skip iprot _t71
          read_Get_column_args_fields iprot rec
      -2 -> if _t71 == T_STRING then do
        s <- readString iprot
        read_Get_column_args_fields iprot rec{f_Get_column_args_key=Just s}
        else do
          skip iprot _t71
          read_Get_column_args_fields iprot rec
      -3 -> if _t71 == T_STRING then do
        s <- readString iprot
        read_Get_column_args_fields iprot rec{f_Get_column_args_columnFamily_column=Just s}
        else do
          skip iprot _t71
          read_Get_column_args_fields iprot rec
      _ -> do
        skip iprot _t71
        readFieldEnd iprot
        read_Get_column_args_fields iprot rec
read_Get_column_args iprot = do
  readStructBegin iprot
  rec <- read_Get_column_args_fields iprot (Get_column_args{f_Get_column_args_tablename=Nothing,f_Get_column_args_key=Nothing,f_Get_column_args_columnFamily_column=Nothing})
  readStructEnd iprot
  return rec
data Get_column_result = Get_column_result{f_Get_column_result_success :: Maybe (Column_t)} deriving (Show,Eq,Ord,Typeable)
write_Get_column_result oprot rec = do
  writeStructBegin oprot "Get_column_result"
  case f_Get_column_result_success rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    write_Column_t oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Get_column_result_fields iprot rec = do
  (_,_t76,_id77) <- readFieldBegin iprot
  if _t76 == T_STOP then return rec else
    case _id77 of 
      0 -> if _t76 == T_STRUCT then do
        s <- (read_Column_t iprot)
        read_Get_column_result_fields iprot rec{f_Get_column_result_success=Just s}
        else do
          skip iprot _t76
          read_Get_column_result_fields iprot rec
      _ -> do
        skip iprot _t76
        readFieldEnd iprot
        read_Get_column_result_fields iprot rec
read_Get_column_result iprot = do
  readStructBegin iprot
  rec <- read_Get_column_result_fields iprot (Get_column_result{f_Get_column_result_success=Nothing})
  readStructEnd iprot
  return rec
data Get_column_count_args = Get_column_count_args{f_Get_column_count_args_tablename :: Maybe ([Char]),f_Get_column_count_args_key :: Maybe ([Char]),f_Get_column_count_args_columnFamily_column :: Maybe ([Char])} deriving (Show,Eq,Ord,Typeable)
write_Get_column_count_args oprot rec = do
  writeStructBegin oprot "Get_column_count_args"
  case f_Get_column_count_args_tablename rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("tablename",T_STRING,-1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Get_column_count_args_key rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("key",T_STRING,-2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Get_column_count_args_columnFamily_column rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("columnFamily_column",T_STRING,-3)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Get_column_count_args_fields iprot rec = do
  (_,_t81,_id82) <- readFieldBegin iprot
  if _t81 == T_STOP then return rec else
    case _id82 of 
      -1 -> if _t81 == T_STRING then do
        s <- readString iprot
        read_Get_column_count_args_fields iprot rec{f_Get_column_count_args_tablename=Just s}
        else do
          skip iprot _t81
          read_Get_column_count_args_fields iprot rec
      -2 -> if _t81 == T_STRING then do
        s <- readString iprot
        read_Get_column_count_args_fields iprot rec{f_Get_column_count_args_key=Just s}
        else do
          skip iprot _t81
          read_Get_column_count_args_fields iprot rec
      -3 -> if _t81 == T_STRING then do
        s <- readString iprot
        read_Get_column_count_args_fields iprot rec{f_Get_column_count_args_columnFamily_column=Just s}
        else do
          skip iprot _t81
          read_Get_column_count_args_fields iprot rec
      _ -> do
        skip iprot _t81
        readFieldEnd iprot
        read_Get_column_count_args_fields iprot rec
read_Get_column_count_args iprot = do
  readStructBegin iprot
  rec <- read_Get_column_count_args_fields iprot (Get_column_count_args{f_Get_column_count_args_tablename=Nothing,f_Get_column_count_args_key=Nothing,f_Get_column_count_args_columnFamily_column=Nothing})
  readStructEnd iprot
  return rec
data Get_column_count_result = Get_column_count_result{f_Get_column_count_result_success :: Maybe (Int)} deriving (Show,Eq,Ord,Typeable)
write_Get_column_count_result oprot rec = do
  writeStructBegin oprot "Get_column_count_result"
  case f_Get_column_count_result_success rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_I32,0)
    writeI32 oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Get_column_count_result_fields iprot rec = do
  (_,_t86,_id87) <- readFieldBegin iprot
  if _t86 == T_STOP then return rec else
    case _id87 of 
      0 -> if _t86 == T_I32 then do
        s <- readI32 iprot
        read_Get_column_count_result_fields iprot rec{f_Get_column_count_result_success=Just s}
        else do
          skip iprot _t86
          read_Get_column_count_result_fields iprot rec
      _ -> do
        skip iprot _t86
        readFieldEnd iprot
        read_Get_column_count_result_fields iprot rec
read_Get_column_count_result iprot = do
  readStructBegin iprot
  rec <- read_Get_column_count_result_fields iprot (Get_column_count_result{f_Get_column_count_result_success=Nothing})
  readStructEnd iprot
  return rec
data Insert_args = Insert_args{f_Insert_args_tablename :: Maybe ([Char]),f_Insert_args_key :: Maybe ([Char]),f_Insert_args_columnFamily_column :: Maybe ([Char]),f_Insert_args_cellData :: Maybe ([Char]),f_Insert_args_timestamp :: Maybe (Int)} deriving (Show,Eq,Ord,Typeable)
write_Insert_args oprot rec = do
  writeStructBegin oprot "Insert_args"
  case f_Insert_args_tablename rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("tablename",T_STRING,-1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Insert_args_key rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("key",T_STRING,-2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Insert_args_columnFamily_column rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("columnFamily_column",T_STRING,-3)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Insert_args_cellData rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("cellData",T_STRING,-4)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Insert_args_timestamp rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("timestamp",T_I32,-5)
    writeI32 oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Insert_args_fields iprot rec = do
  (_,_t91,_id92) <- readFieldBegin iprot
  if _t91 == T_STOP then return rec else
    case _id92 of 
      -1 -> if _t91 == T_STRING then do
        s <- readString iprot
        read_Insert_args_fields iprot rec{f_Insert_args_tablename=Just s}
        else do
          skip iprot _t91
          read_Insert_args_fields iprot rec
      -2 -> if _t91 == T_STRING then do
        s <- readString iprot
        read_Insert_args_fields iprot rec{f_Insert_args_key=Just s}
        else do
          skip iprot _t91
          read_Insert_args_fields iprot rec
      -3 -> if _t91 == T_STRING then do
        s <- readString iprot
        read_Insert_args_fields iprot rec{f_Insert_args_columnFamily_column=Just s}
        else do
          skip iprot _t91
          read_Insert_args_fields iprot rec
      -4 -> if _t91 == T_STRING then do
        s <- readString iprot
        read_Insert_args_fields iprot rec{f_Insert_args_cellData=Just s}
        else do
          skip iprot _t91
          read_Insert_args_fields iprot rec
      -5 -> if _t91 == T_I32 then do
        s <- readI32 iprot
        read_Insert_args_fields iprot rec{f_Insert_args_timestamp=Just s}
        else do
          skip iprot _t91
          read_Insert_args_fields iprot rec
      _ -> do
        skip iprot _t91
        readFieldEnd iprot
        read_Insert_args_fields iprot rec
read_Insert_args iprot = do
  readStructBegin iprot
  rec <- read_Insert_args_fields iprot (Insert_args{f_Insert_args_tablename=Nothing,f_Insert_args_key=Nothing,f_Insert_args_columnFamily_column=Nothing,f_Insert_args_cellData=Nothing,f_Insert_args_timestamp=Nothing})
  readStructEnd iprot
  return rec
data Insert_result = Insert_result deriving (Show,Eq,Ord,Typeable)
write_Insert_result oprot rec = do
  writeStructBegin oprot "Insert_result"
  writeFieldStop oprot
  writeStructEnd oprot
read_Insert_result_fields iprot rec = do
  (_,_t96,_id97) <- readFieldBegin iprot
  if _t96 == T_STOP then return rec else
    case _id97 of 
      _ -> do
        skip iprot _t96
        readFieldEnd iprot
        read_Insert_result_fields iprot rec
read_Insert_result iprot = do
  readStructBegin iprot
  rec <- read_Insert_result_fields iprot (Insert_result{})
  readStructEnd iprot
  return rec
data Batch_insert_args = Batch_insert_args{f_Batch_insert_args_batchMutation :: Maybe (Batch_mutation_t)} deriving (Show,Eq,Ord,Typeable)
write_Batch_insert_args oprot rec = do
  writeStructBegin oprot "Batch_insert_args"
  case f_Batch_insert_args_batchMutation rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("batchMutation",T_STRUCT,-1)
    write_Batch_mutation_t oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Batch_insert_args_fields iprot rec = do
  (_,_t101,_id102) <- readFieldBegin iprot
  if _t101 == T_STOP then return rec else
    case _id102 of 
      -1 -> if _t101 == T_STRUCT then do
        s <- (read_Batch_mutation_t iprot)
        read_Batch_insert_args_fields iprot rec{f_Batch_insert_args_batchMutation=Just s}
        else do
          skip iprot _t101
          read_Batch_insert_args_fields iprot rec
      _ -> do
        skip iprot _t101
        readFieldEnd iprot
        read_Batch_insert_args_fields iprot rec
read_Batch_insert_args iprot = do
  readStructBegin iprot
  rec <- read_Batch_insert_args_fields iprot (Batch_insert_args{f_Batch_insert_args_batchMutation=Nothing})
  readStructEnd iprot
  return rec
data Batch_insert_result = Batch_insert_result deriving (Show,Eq,Ord,Typeable)
write_Batch_insert_result oprot rec = do
  writeStructBegin oprot "Batch_insert_result"
  writeFieldStop oprot
  writeStructEnd oprot
read_Batch_insert_result_fields iprot rec = do
  (_,_t106,_id107) <- readFieldBegin iprot
  if _t106 == T_STOP then return rec else
    case _id107 of 
      _ -> do
        skip iprot _t106
        readFieldEnd iprot
        read_Batch_insert_result_fields iprot rec
read_Batch_insert_result iprot = do
  readStructBegin iprot
  rec <- read_Batch_insert_result_fields iprot (Batch_insert_result{})
  readStructEnd iprot
  return rec
data Batch_insert_blocking_args = Batch_insert_blocking_args{f_Batch_insert_blocking_args_batchMutation :: Maybe (Batch_mutation_t)} deriving (Show,Eq,Ord,Typeable)
write_Batch_insert_blocking_args oprot rec = do
  writeStructBegin oprot "Batch_insert_blocking_args"
  case f_Batch_insert_blocking_args_batchMutation rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("batchMutation",T_STRUCT,-1)
    write_Batch_mutation_t oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Batch_insert_blocking_args_fields iprot rec = do
  (_,_t111,_id112) <- readFieldBegin iprot
  if _t111 == T_STOP then return rec else
    case _id112 of 
      -1 -> if _t111 == T_STRUCT then do
        s <- (read_Batch_mutation_t iprot)
        read_Batch_insert_blocking_args_fields iprot rec{f_Batch_insert_blocking_args_batchMutation=Just s}
        else do
          skip iprot _t111
          read_Batch_insert_blocking_args_fields iprot rec
      _ -> do
        skip iprot _t111
        readFieldEnd iprot
        read_Batch_insert_blocking_args_fields iprot rec
read_Batch_insert_blocking_args iprot = do
  readStructBegin iprot
  rec <- read_Batch_insert_blocking_args_fields iprot (Batch_insert_blocking_args{f_Batch_insert_blocking_args_batchMutation=Nothing})
  readStructEnd iprot
  return rec
data Batch_insert_blocking_result = Batch_insert_blocking_result{f_Batch_insert_blocking_result_success :: Maybe (Bool)} deriving (Show,Eq,Ord,Typeable)
write_Batch_insert_blocking_result oprot rec = do
  writeStructBegin oprot "Batch_insert_blocking_result"
  case f_Batch_insert_blocking_result_success rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_BOOL,0)
    writeBool oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Batch_insert_blocking_result_fields iprot rec = do
  (_,_t116,_id117) <- readFieldBegin iprot
  if _t116 == T_STOP then return rec else
    case _id117 of 
      0 -> if _t116 == T_BOOL then do
        s <- readBool iprot
        read_Batch_insert_blocking_result_fields iprot rec{f_Batch_insert_blocking_result_success=Just s}
        else do
          skip iprot _t116
          read_Batch_insert_blocking_result_fields iprot rec
      _ -> do
        skip iprot _t116
        readFieldEnd iprot
        read_Batch_insert_blocking_result_fields iprot rec
read_Batch_insert_blocking_result iprot = do
  readStructBegin iprot
  rec <- read_Batch_insert_blocking_result_fields iprot (Batch_insert_blocking_result{f_Batch_insert_blocking_result_success=Nothing})
  readStructEnd iprot
  return rec
data Remove_args = Remove_args{f_Remove_args_tablename :: Maybe ([Char]),f_Remove_args_key :: Maybe ([Char]),f_Remove_args_columnFamily_column :: Maybe ([Char])} deriving (Show,Eq,Ord,Typeable)
write_Remove_args oprot rec = do
  writeStructBegin oprot "Remove_args"
  case f_Remove_args_tablename rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("tablename",T_STRING,-1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Remove_args_key rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("key",T_STRING,-2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Remove_args_columnFamily_column rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("columnFamily_column",T_STRING,-3)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Remove_args_fields iprot rec = do
  (_,_t121,_id122) <- readFieldBegin iprot
  if _t121 == T_STOP then return rec else
    case _id122 of 
      -1 -> if _t121 == T_STRING then do
        s <- readString iprot
        read_Remove_args_fields iprot rec{f_Remove_args_tablename=Just s}
        else do
          skip iprot _t121
          read_Remove_args_fields iprot rec
      -2 -> if _t121 == T_STRING then do
        s <- readString iprot
        read_Remove_args_fields iprot rec{f_Remove_args_key=Just s}
        else do
          skip iprot _t121
          read_Remove_args_fields iprot rec
      -3 -> if _t121 == T_STRING then do
        s <- readString iprot
        read_Remove_args_fields iprot rec{f_Remove_args_columnFamily_column=Just s}
        else do
          skip iprot _t121
          read_Remove_args_fields iprot rec
      _ -> do
        skip iprot _t121
        readFieldEnd iprot
        read_Remove_args_fields iprot rec
read_Remove_args iprot = do
  readStructBegin iprot
  rec <- read_Remove_args_fields iprot (Remove_args{f_Remove_args_tablename=Nothing,f_Remove_args_key=Nothing,f_Remove_args_columnFamily_column=Nothing})
  readStructEnd iprot
  return rec
data Remove_result = Remove_result deriving (Show,Eq,Ord,Typeable)
write_Remove_result oprot rec = do
  writeStructBegin oprot "Remove_result"
  writeFieldStop oprot
  writeStructEnd oprot
read_Remove_result_fields iprot rec = do
  (_,_t126,_id127) <- readFieldBegin iprot
  if _t126 == T_STOP then return rec else
    case _id127 of 
      _ -> do
        skip iprot _t126
        readFieldEnd iprot
        read_Remove_result_fields iprot rec
read_Remove_result iprot = do
  readStructBegin iprot
  rec <- read_Remove_result_fields iprot (Remove_result{})
  readStructEnd iprot
  return rec
data Get_slice_super_args = Get_slice_super_args{f_Get_slice_super_args_tablename :: Maybe ([Char]),f_Get_slice_super_args_key :: Maybe ([Char]),f_Get_slice_super_args_columnFamily_superColumnName :: Maybe ([Char]),f_Get_slice_super_args_start :: Maybe (Int),f_Get_slice_super_args_count :: Maybe (Int)} deriving (Show,Eq,Ord,Typeable)
write_Get_slice_super_args oprot rec = do
  writeStructBegin oprot "Get_slice_super_args"
  case f_Get_slice_super_args_tablename rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("tablename",T_STRING,-1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Get_slice_super_args_key rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("key",T_STRING,-2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Get_slice_super_args_columnFamily_superColumnName rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("columnFamily_superColumnName",T_STRING,-3)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Get_slice_super_args_start rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("start",T_I32,-4)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_Get_slice_super_args_count rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("count",T_I32,-5)
    writeI32 oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Get_slice_super_args_fields iprot rec = do
  (_,_t131,_id132) <- readFieldBegin iprot
  if _t131 == T_STOP then return rec else
    case _id132 of 
      -1 -> if _t131 == T_STRING then do
        s <- readString iprot
        read_Get_slice_super_args_fields iprot rec{f_Get_slice_super_args_tablename=Just s}
        else do
          skip iprot _t131
          read_Get_slice_super_args_fields iprot rec
      -2 -> if _t131 == T_STRING then do
        s <- readString iprot
        read_Get_slice_super_args_fields iprot rec{f_Get_slice_super_args_key=Just s}
        else do
          skip iprot _t131
          read_Get_slice_super_args_fields iprot rec
      -3 -> if _t131 == T_STRING then do
        s <- readString iprot
        read_Get_slice_super_args_fields iprot rec{f_Get_slice_super_args_columnFamily_superColumnName=Just s}
        else do
          skip iprot _t131
          read_Get_slice_super_args_fields iprot rec
      -4 -> if _t131 == T_I32 then do
        s <- readI32 iprot
        read_Get_slice_super_args_fields iprot rec{f_Get_slice_super_args_start=Just s}
        else do
          skip iprot _t131
          read_Get_slice_super_args_fields iprot rec
      -5 -> if _t131 == T_I32 then do
        s <- readI32 iprot
        read_Get_slice_super_args_fields iprot rec{f_Get_slice_super_args_count=Just s}
        else do
          skip iprot _t131
          read_Get_slice_super_args_fields iprot rec
      _ -> do
        skip iprot _t131
        readFieldEnd iprot
        read_Get_slice_super_args_fields iprot rec
read_Get_slice_super_args iprot = do
  readStructBegin iprot
  rec <- read_Get_slice_super_args_fields iprot (Get_slice_super_args{f_Get_slice_super_args_tablename=Nothing,f_Get_slice_super_args_key=Nothing,f_Get_slice_super_args_columnFamily_superColumnName=Nothing,f_Get_slice_super_args_start=Nothing,f_Get_slice_super_args_count=Nothing})
  readStructEnd iprot
  return rec
data Get_slice_super_result = Get_slice_super_result{f_Get_slice_super_result_success :: Maybe ([SuperColumn_t])} deriving (Show,Eq,Ord,Typeable)
write_Get_slice_super_result oprot rec = do
  writeStructBegin oprot "Get_slice_super_result"
  case f_Get_slice_super_result_success rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_LIST,0)
    (let {f [] = return (); f (_viter135:t) = do {write_SuperColumn_t oprot _viter135;f t}} in do {writeListBegin oprot (T_STRUCT,length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Get_slice_super_result_fields iprot rec = do
  (_,_t137,_id138) <- readFieldBegin iprot
  if _t137 == T_STOP then return rec else
    case _id138 of 
      0 -> if _t137 == T_LIST then do
        s <- (let {f 0 = return []; f n = do {v <- (read_SuperColumn_t iprot);r <- f (n-1); return $ v:r}} in do {(_etype142,_size139) <- readListBegin iprot; f _size139})
        read_Get_slice_super_result_fields iprot rec{f_Get_slice_super_result_success=Just s}
        else do
          skip iprot _t137
          read_Get_slice_super_result_fields iprot rec
      _ -> do
        skip iprot _t137
        readFieldEnd iprot
        read_Get_slice_super_result_fields iprot rec
read_Get_slice_super_result iprot = do
  readStructBegin iprot
  rec <- read_Get_slice_super_result_fields iprot (Get_slice_super_result{f_Get_slice_super_result_success=Nothing})
  readStructEnd iprot
  return rec
data Get_superColumn_args = Get_superColumn_args{f_Get_superColumn_args_tablename :: Maybe ([Char]),f_Get_superColumn_args_key :: Maybe ([Char]),f_Get_superColumn_args_columnFamily :: Maybe ([Char])} deriving (Show,Eq,Ord,Typeable)
write_Get_superColumn_args oprot rec = do
  writeStructBegin oprot "Get_superColumn_args"
  case f_Get_superColumn_args_tablename rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("tablename",T_STRING,-1)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Get_superColumn_args_key rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("key",T_STRING,-2)
    writeString oprot _v
    writeFieldEnd oprot}
  case f_Get_superColumn_args_columnFamily rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("columnFamily",T_STRING,-3)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Get_superColumn_args_fields iprot rec = do
  (_,_t147,_id148) <- readFieldBegin iprot
  if _t147 == T_STOP then return rec else
    case _id148 of 
      -1 -> if _t147 == T_STRING then do
        s <- readString iprot
        read_Get_superColumn_args_fields iprot rec{f_Get_superColumn_args_tablename=Just s}
        else do
          skip iprot _t147
          read_Get_superColumn_args_fields iprot rec
      -2 -> if _t147 == T_STRING then do
        s <- readString iprot
        read_Get_superColumn_args_fields iprot rec{f_Get_superColumn_args_key=Just s}
        else do
          skip iprot _t147
          read_Get_superColumn_args_fields iprot rec
      -3 -> if _t147 == T_STRING then do
        s <- readString iprot
        read_Get_superColumn_args_fields iprot rec{f_Get_superColumn_args_columnFamily=Just s}
        else do
          skip iprot _t147
          read_Get_superColumn_args_fields iprot rec
      _ -> do
        skip iprot _t147
        readFieldEnd iprot
        read_Get_superColumn_args_fields iprot rec
read_Get_superColumn_args iprot = do
  readStructBegin iprot
  rec <- read_Get_superColumn_args_fields iprot (Get_superColumn_args{f_Get_superColumn_args_tablename=Nothing,f_Get_superColumn_args_key=Nothing,f_Get_superColumn_args_columnFamily=Nothing})
  readStructEnd iprot
  return rec
data Get_superColumn_result = Get_superColumn_result{f_Get_superColumn_result_success :: Maybe (SuperColumn_t)} deriving (Show,Eq,Ord,Typeable)
write_Get_superColumn_result oprot rec = do
  writeStructBegin oprot "Get_superColumn_result"
  case f_Get_superColumn_result_success rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_STRUCT,0)
    write_SuperColumn_t oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Get_superColumn_result_fields iprot rec = do
  (_,_t152,_id153) <- readFieldBegin iprot
  if _t152 == T_STOP then return rec else
    case _id153 of 
      0 -> if _t152 == T_STRUCT then do
        s <- (read_SuperColumn_t iprot)
        read_Get_superColumn_result_fields iprot rec{f_Get_superColumn_result_success=Just s}
        else do
          skip iprot _t152
          read_Get_superColumn_result_fields iprot rec
      _ -> do
        skip iprot _t152
        readFieldEnd iprot
        read_Get_superColumn_result_fields iprot rec
read_Get_superColumn_result iprot = do
  readStructBegin iprot
  rec <- read_Get_superColumn_result_fields iprot (Get_superColumn_result{f_Get_superColumn_result_success=Nothing})
  readStructEnd iprot
  return rec
data Batch_insert_superColumn_args = Batch_insert_superColumn_args{f_Batch_insert_superColumn_args_batchMutationSuper :: Maybe (Batch_mutation_super_t)} deriving (Show,Eq,Ord,Typeable)
write_Batch_insert_superColumn_args oprot rec = do
  writeStructBegin oprot "Batch_insert_superColumn_args"
  case f_Batch_insert_superColumn_args_batchMutationSuper rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("batchMutationSuper",T_STRUCT,-1)
    write_Batch_mutation_super_t oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Batch_insert_superColumn_args_fields iprot rec = do
  (_,_t157,_id158) <- readFieldBegin iprot
  if _t157 == T_STOP then return rec else
    case _id158 of 
      -1 -> if _t157 == T_STRUCT then do
        s <- (read_Batch_mutation_super_t iprot)
        read_Batch_insert_superColumn_args_fields iprot rec{f_Batch_insert_superColumn_args_batchMutationSuper=Just s}
        else do
          skip iprot _t157
          read_Batch_insert_superColumn_args_fields iprot rec
      _ -> do
        skip iprot _t157
        readFieldEnd iprot
        read_Batch_insert_superColumn_args_fields iprot rec
read_Batch_insert_superColumn_args iprot = do
  readStructBegin iprot
  rec <- read_Batch_insert_superColumn_args_fields iprot (Batch_insert_superColumn_args{f_Batch_insert_superColumn_args_batchMutationSuper=Nothing})
  readStructEnd iprot
  return rec
data Batch_insert_superColumn_result = Batch_insert_superColumn_result deriving (Show,Eq,Ord,Typeable)
write_Batch_insert_superColumn_result oprot rec = do
  writeStructBegin oprot "Batch_insert_superColumn_result"
  writeFieldStop oprot
  writeStructEnd oprot
read_Batch_insert_superColumn_result_fields iprot rec = do
  (_,_t162,_id163) <- readFieldBegin iprot
  if _t162 == T_STOP then return rec else
    case _id163 of 
      _ -> do
        skip iprot _t162
        readFieldEnd iprot
        read_Batch_insert_superColumn_result_fields iprot rec
read_Batch_insert_superColumn_result iprot = do
  readStructBegin iprot
  rec <- read_Batch_insert_superColumn_result_fields iprot (Batch_insert_superColumn_result{})
  readStructEnd iprot
  return rec
data Batch_insert_superColumn_blocking_args = Batch_insert_superColumn_blocking_args{f_Batch_insert_superColumn_blocking_args_batchMutationSuper :: Maybe (Batch_mutation_super_t)} deriving (Show,Eq,Ord,Typeable)
write_Batch_insert_superColumn_blocking_args oprot rec = do
  writeStructBegin oprot "Batch_insert_superColumn_blocking_args"
  case f_Batch_insert_superColumn_blocking_args_batchMutationSuper rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("batchMutationSuper",T_STRUCT,-1)
    write_Batch_mutation_super_t oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Batch_insert_superColumn_blocking_args_fields iprot rec = do
  (_,_t167,_id168) <- readFieldBegin iprot
  if _t167 == T_STOP then return rec else
    case _id168 of 
      -1 -> if _t167 == T_STRUCT then do
        s <- (read_Batch_mutation_super_t iprot)
        read_Batch_insert_superColumn_blocking_args_fields iprot rec{f_Batch_insert_superColumn_blocking_args_batchMutationSuper=Just s}
        else do
          skip iprot _t167
          read_Batch_insert_superColumn_blocking_args_fields iprot rec
      _ -> do
        skip iprot _t167
        readFieldEnd iprot
        read_Batch_insert_superColumn_blocking_args_fields iprot rec
read_Batch_insert_superColumn_blocking_args iprot = do
  readStructBegin iprot
  rec <- read_Batch_insert_superColumn_blocking_args_fields iprot (Batch_insert_superColumn_blocking_args{f_Batch_insert_superColumn_blocking_args_batchMutationSuper=Nothing})
  readStructEnd iprot
  return rec
data Batch_insert_superColumn_blocking_result = Batch_insert_superColumn_blocking_result{f_Batch_insert_superColumn_blocking_result_success :: Maybe (Bool)} deriving (Show,Eq,Ord,Typeable)
write_Batch_insert_superColumn_blocking_result oprot rec = do
  writeStructBegin oprot "Batch_insert_superColumn_blocking_result"
  case f_Batch_insert_superColumn_blocking_result_success rec of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_BOOL,0)
    writeBool oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Batch_insert_superColumn_blocking_result_fields iprot rec = do
  (_,_t172,_id173) <- readFieldBegin iprot
  if _t172 == T_STOP then return rec else
    case _id173 of 
      0 -> if _t172 == T_BOOL then do
        s <- readBool iprot
        read_Batch_insert_superColumn_blocking_result_fields iprot rec{f_Batch_insert_superColumn_blocking_result_success=Just s}
        else do
          skip iprot _t172
          read_Batch_insert_superColumn_blocking_result_fields iprot rec
      _ -> do
        skip iprot _t172
        readFieldEnd iprot
        read_Batch_insert_superColumn_blocking_result_fields iprot rec
read_Batch_insert_superColumn_blocking_result iprot = do
  readStructBegin iprot
  rec <- read_Batch_insert_superColumn_blocking_result_fields iprot (Batch_insert_superColumn_blocking_result{f_Batch_insert_superColumn_blocking_result_success=Nothing})
  readStructEnd iprot
  return rec
process_get_slice (seqid, iprot, oprot, handler) = do
  args <- read_Get_slice_args iprot
  readMessageEnd iprot
  rs <- return (Get_slice_result Nothing)
  res <- (do
    res <- Iface.get_slice handler (f_Get_slice_args_tablename args) (f_Get_slice_args_key args) (f_Get_slice_args_columnFamily_column args) (f_Get_slice_args_start args) (f_Get_slice_args_count args)
    return rs{f_Get_slice_result_success= Just res})
  writeMessageBegin oprot ("get_slice", M_REPLY, seqid);
  write_Get_slice_result oprot res
  writeMessageEnd oprot
  tflush (getTransport oprot)
process_get_column (seqid, iprot, oprot, handler) = do
  args <- read_Get_column_args iprot
  readMessageEnd iprot
  rs <- return (Get_column_result Nothing)
  res <- (do
    res <- Iface.get_column handler (f_Get_column_args_tablename args) (f_Get_column_args_key args) (f_Get_column_args_columnFamily_column args)
    return rs{f_Get_column_result_success= Just res})
  writeMessageBegin oprot ("get_column", M_REPLY, seqid);
  write_Get_column_result oprot res
  writeMessageEnd oprot
  tflush (getTransport oprot)
process_get_column_count (seqid, iprot, oprot, handler) = do
  args <- read_Get_column_count_args iprot
  readMessageEnd iprot
  rs <- return (Get_column_count_result Nothing)
  res <- (do
    res <- Iface.get_column_count handler (f_Get_column_count_args_tablename args) (f_Get_column_count_args_key args) (f_Get_column_count_args_columnFamily_column args)
    return rs{f_Get_column_count_result_success= Just res})
  writeMessageBegin oprot ("get_column_count", M_REPLY, seqid);
  write_Get_column_count_result oprot res
  writeMessageEnd oprot
  tflush (getTransport oprot)
process_insert (seqid, iprot, oprot, handler) = do
  args <- read_Insert_args iprot
  readMessageEnd iprot
  res <- (do
    Iface.insert handler (f_Insert_args_tablename args) (f_Insert_args_key args) (f_Insert_args_columnFamily_column args) (f_Insert_args_cellData args) (f_Insert_args_timestamp args))
  return ()
process_batch_insert (seqid, iprot, oprot, handler) = do
  args <- read_Batch_insert_args iprot
  readMessageEnd iprot
  res <- (do
    Iface.batch_insert handler (f_Batch_insert_args_batchMutation args))
  return ()
process_batch_insert_blocking (seqid, iprot, oprot, handler) = do
  args <- read_Batch_insert_blocking_args iprot
  readMessageEnd iprot
  rs <- return (Batch_insert_blocking_result Nothing)
  res <- (do
    res <- Iface.batch_insert_blocking handler (f_Batch_insert_blocking_args_batchMutation args)
    return rs{f_Batch_insert_blocking_result_success= Just res})
  writeMessageBegin oprot ("batch_insert_blocking", M_REPLY, seqid);
  write_Batch_insert_blocking_result oprot res
  writeMessageEnd oprot
  tflush (getTransport oprot)
process_remove (seqid, iprot, oprot, handler) = do
  args <- read_Remove_args iprot
  readMessageEnd iprot
  res <- (do
    Iface.remove handler (f_Remove_args_tablename args) (f_Remove_args_key args) (f_Remove_args_columnFamily_column args))
  return ()
process_get_slice_super (seqid, iprot, oprot, handler) = do
  args <- read_Get_slice_super_args iprot
  readMessageEnd iprot
  rs <- return (Get_slice_super_result Nothing)
  res <- (do
    res <- Iface.get_slice_super handler (f_Get_slice_super_args_tablename args) (f_Get_slice_super_args_key args) (f_Get_slice_super_args_columnFamily_superColumnName args) (f_Get_slice_super_args_start args) (f_Get_slice_super_args_count args)
    return rs{f_Get_slice_super_result_success= Just res})
  writeMessageBegin oprot ("get_slice_super", M_REPLY, seqid);
  write_Get_slice_super_result oprot res
  writeMessageEnd oprot
  tflush (getTransport oprot)
process_get_superColumn (seqid, iprot, oprot, handler) = do
  args <- read_Get_superColumn_args iprot
  readMessageEnd iprot
  rs <- return (Get_superColumn_result Nothing)
  res <- (do
    res <- Iface.get_superColumn handler (f_Get_superColumn_args_tablename args) (f_Get_superColumn_args_key args) (f_Get_superColumn_args_columnFamily args)
    return rs{f_Get_superColumn_result_success= Just res})
  writeMessageBegin oprot ("get_superColumn", M_REPLY, seqid);
  write_Get_superColumn_result oprot res
  writeMessageEnd oprot
  tflush (getTransport oprot)
process_batch_insert_superColumn (seqid, iprot, oprot, handler) = do
  args <- read_Batch_insert_superColumn_args iprot
  readMessageEnd iprot
  res <- (do
    Iface.batch_insert_superColumn handler (f_Batch_insert_superColumn_args_batchMutationSuper args))
  return ()
process_batch_insert_superColumn_blocking (seqid, iprot, oprot, handler) = do
  args <- read_Batch_insert_superColumn_blocking_args iprot
  readMessageEnd iprot
  rs <- return (Batch_insert_superColumn_blocking_result Nothing)
  res <- (do
    res <- Iface.batch_insert_superColumn_blocking handler (f_Batch_insert_superColumn_blocking_args_batchMutationSuper args)
    return rs{f_Batch_insert_superColumn_blocking_result_success= Just res})
  writeMessageBegin oprot ("batch_insert_superColumn_blocking", M_REPLY, seqid);
  write_Batch_insert_superColumn_blocking_result oprot res
  writeMessageEnd oprot
  tflush (getTransport oprot)
proc handler (iprot,oprot) (name,typ,seqid) = case name of
  "get_slice" -> process_get_slice (seqid,iprot,oprot,handler)
  "get_column" -> process_get_column (seqid,iprot,oprot,handler)
  "get_column_count" -> process_get_column_count (seqid,iprot,oprot,handler)
  "insert" -> process_insert (seqid,iprot,oprot,handler)
  "batch_insert" -> process_batch_insert (seqid,iprot,oprot,handler)
  "batch_insert_blocking" -> process_batch_insert_blocking (seqid,iprot,oprot,handler)
  "remove" -> process_remove (seqid,iprot,oprot,handler)
  "get_slice_super" -> process_get_slice_super (seqid,iprot,oprot,handler)
  "get_superColumn" -> process_get_superColumn (seqid,iprot,oprot,handler)
  "batch_insert_superColumn" -> process_batch_insert_superColumn (seqid,iprot,oprot,handler)
  "batch_insert_superColumn_blocking" -> process_batch_insert_superColumn_blocking (seqid,iprot,oprot,handler)
  _ -> FacebookService.proc handler (iprot,oprot) (name,typ,seqid)
process handler (iprot, oprot) = do
  (name, typ, seqid) <- readMessageBegin iprot
  proc handler (iprot,oprot) (name,typ,seqid)
  return True
