/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using Thrift;
using Thrift.Protocol;
using Thrift.Transport;
public class Cassandra {
  public interface Iface : FacebookService.Iface {
    List<column_t> get_slice(string tablename, string key, string columnFamily_column, int start, int count);
    column_t get_column(string tablename, string key, string columnFamily_column);
    int get_column_count(string tablename, string key, string columnFamily_column);
    void insert(string tablename, string key, string columnFamily_column, string cellData, int timestamp);
    void batch_insert(batch_mutation_t batchMutation);
    bool batch_insert_blocking(batch_mutation_t batchMutation);
    void remove(string tablename, string key, string columnFamily_column);
    List<superColumn_t> get_slice_super(string tablename, string key, string columnFamily_superColumnName, int start, int count);
    superColumn_t get_superColumn(string tablename, string key, string columnFamily);
    void batch_insert_superColumn(batch_mutation_super_t batchMutationSuper);
    bool batch_insert_superColumn_blocking(batch_mutation_super_t batchMutationSuper);
  }

  public class Client : FacebookService.Client, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
    {
    }

    public List<column_t> get_slice(string tablename, string key, string columnFamily_column, int start, int count)
    {
      send_get_slice(tablename, key, columnFamily_column, start, count);
      return recv_get_slice();
    }

    public void send_get_slice(string tablename, string key, string columnFamily_column, int start, int count)
    {
      oprot_.WriteMessageBegin(new TMessage("get_slice", TMessageType.Call, seqid_));
      get_slice_args args = new get_slice_args();
      args.tablename = tablename;
      args.key = key;
      args.columnFamily_column = columnFamily_column;
      args.start = start;
      args.count = count;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }

    public List<column_t> recv_get_slice()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_slice_result result = new get_slice_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_slice failed: unknown result");
    }

    public column_t get_column(string tablename, string key, string columnFamily_column)
    {
      send_get_column(tablename, key, columnFamily_column);
      return recv_get_column();
    }

    public void send_get_column(string tablename, string key, string columnFamily_column)
    {
      oprot_.WriteMessageBegin(new TMessage("get_column", TMessageType.Call, seqid_));
      get_column_args args = new get_column_args();
      args.tablename = tablename;
      args.key = key;
      args.columnFamily_column = columnFamily_column;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }

    public column_t recv_get_column()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_column_result result = new get_column_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_column failed: unknown result");
    }

    public int get_column_count(string tablename, string key, string columnFamily_column)
    {
      send_get_column_count(tablename, key, columnFamily_column);
      return recv_get_column_count();
    }

    public void send_get_column_count(string tablename, string key, string columnFamily_column)
    {
      oprot_.WriteMessageBegin(new TMessage("get_column_count", TMessageType.Call, seqid_));
      get_column_count_args args = new get_column_count_args();
      args.tablename = tablename;
      args.key = key;
      args.columnFamily_column = columnFamily_column;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }

    public int recv_get_column_count()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_column_count_result result = new get_column_count_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_column_count failed: unknown result");
    }

    public void insert(string tablename, string key, string columnFamily_column, string cellData, int timestamp)
    {
      send_insert(tablename, key, columnFamily_column, cellData, timestamp);
    }

    public void send_insert(string tablename, string key, string columnFamily_column, string cellData, int timestamp)
    {
      oprot_.WriteMessageBegin(new TMessage("insert", TMessageType.Call, seqid_));
      insert_args args = new insert_args();
      args.tablename = tablename;
      args.key = key;
      args.columnFamily_column = columnFamily_column;
      args.cellData = cellData;
      args.timestamp = timestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }

    public void batch_insert(batch_mutation_t batchMutation)
    {
      send_batch_insert(batchMutation);
    }

    public void send_batch_insert(batch_mutation_t batchMutation)
    {
      oprot_.WriteMessageBegin(new TMessage("batch_insert", TMessageType.Call, seqid_));
      batch_insert_args args = new batch_insert_args();
      args.batchMutation = batchMutation;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }

    public bool batch_insert_blocking(batch_mutation_t batchMutation)
    {
      send_batch_insert_blocking(batchMutation);
      return recv_batch_insert_blocking();
    }

    public void send_batch_insert_blocking(batch_mutation_t batchMutation)
    {
      oprot_.WriteMessageBegin(new TMessage("batch_insert_blocking", TMessageType.Call, seqid_));
      batch_insert_blocking_args args = new batch_insert_blocking_args();
      args.batchMutation = batchMutation;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }

    public bool recv_batch_insert_blocking()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      batch_insert_blocking_result result = new batch_insert_blocking_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "batch_insert_blocking failed: unknown result");
    }

    public void remove(string tablename, string key, string columnFamily_column)
    {
      send_remove(tablename, key, columnFamily_column);
    }

    public void send_remove(string tablename, string key, string columnFamily_column)
    {
      oprot_.WriteMessageBegin(new TMessage("remove", TMessageType.Call, seqid_));
      remove_args args = new remove_args();
      args.tablename = tablename;
      args.key = key;
      args.columnFamily_column = columnFamily_column;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }

    public List<superColumn_t> get_slice_super(string tablename, string key, string columnFamily_superColumnName, int start, int count)
    {
      send_get_slice_super(tablename, key, columnFamily_superColumnName, start, count);
      return recv_get_slice_super();
    }

    public void send_get_slice_super(string tablename, string key, string columnFamily_superColumnName, int start, int count)
    {
      oprot_.WriteMessageBegin(new TMessage("get_slice_super", TMessageType.Call, seqid_));
      get_slice_super_args args = new get_slice_super_args();
      args.tablename = tablename;
      args.key = key;
      args.columnFamily_superColumnName = columnFamily_superColumnName;
      args.start = start;
      args.count = count;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }

    public List<superColumn_t> recv_get_slice_super()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_slice_super_result result = new get_slice_super_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_slice_super failed: unknown result");
    }

    public superColumn_t get_superColumn(string tablename, string key, string columnFamily)
    {
      send_get_superColumn(tablename, key, columnFamily);
      return recv_get_superColumn();
    }

    public void send_get_superColumn(string tablename, string key, string columnFamily)
    {
      oprot_.WriteMessageBegin(new TMessage("get_superColumn", TMessageType.Call, seqid_));
      get_superColumn_args args = new get_superColumn_args();
      args.tablename = tablename;
      args.key = key;
      args.columnFamily = columnFamily;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }

    public superColumn_t recv_get_superColumn()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      get_superColumn_result result = new get_superColumn_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_superColumn failed: unknown result");
    }

    public void batch_insert_superColumn(batch_mutation_super_t batchMutationSuper)
    {
      send_batch_insert_superColumn(batchMutationSuper);
    }

    public void send_batch_insert_superColumn(batch_mutation_super_t batchMutationSuper)
    {
      oprot_.WriteMessageBegin(new TMessage("batch_insert_superColumn", TMessageType.Call, seqid_));
      batch_insert_superColumn_args args = new batch_insert_superColumn_args();
      args.batchMutationSuper = batchMutationSuper;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }

    public bool batch_insert_superColumn_blocking(batch_mutation_super_t batchMutationSuper)
    {
      send_batch_insert_superColumn_blocking(batchMutationSuper);
      return recv_batch_insert_superColumn_blocking();
    }

    public void send_batch_insert_superColumn_blocking(batch_mutation_super_t batchMutationSuper)
    {
      oprot_.WriteMessageBegin(new TMessage("batch_insert_superColumn_blocking", TMessageType.Call, seqid_));
      batch_insert_superColumn_blocking_args args = new batch_insert_superColumn_blocking_args();
      args.batchMutationSuper = batchMutationSuper;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }

    public bool recv_batch_insert_superColumn_blocking()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      batch_insert_superColumn_blocking_result result = new batch_insert_superColumn_blocking_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "batch_insert_superColumn_blocking failed: unknown result");
    }

  }
  public class Processor : FacebookService.Processor, TProcessor {
    public Processor(Iface iface) : base(iface)
    {
      iface_ = iface;
      processMap_["get_slice"] = get_slice_Process;
      processMap_["get_column"] = get_column_Process;
      processMap_["get_column_count"] = get_column_count_Process;
      processMap_["insert"] = insert_Process;
      processMap_["batch_insert"] = batch_insert_Process;
      processMap_["batch_insert_blocking"] = batch_insert_blocking_Process;
      processMap_["remove"] = remove_Process;
      processMap_["get_slice_super"] = get_slice_super_Process;
      processMap_["get_superColumn"] = get_superColumn_Process;
      processMap_["batch_insert_superColumn"] = batch_insert_superColumn_Process;
      processMap_["batch_insert_superColumn_blocking"] = batch_insert_superColumn_blocking_Process;
    }

    private Iface iface_;

    public new bool Process(TProtocol iprot, TProtocol oprot)
    {
      TMessage msg = iprot.ReadMessageBegin();
      ProcessFunction fn = processMap_[msg.Name];
      if (fn == null) {
        TProtocolUtil.Skip(iprot, TType.Struct);
        iprot.ReadMessageEnd();
        TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
        oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
        x.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
        return true;
      }
      fn(msg.SeqID, iprot, oprot);
      return true;
    }

    public void get_slice_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_slice_args args = new get_slice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_slice_result result = new get_slice_result();
      result.success = iface_.get_slice(args.tablename, args.key, args.columnFamily_column, args.start, args.count);
      result.__isset.success = true;
      oprot.WriteMessageBegin(new TMessage("get_slice", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_column_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_column_args args = new get_column_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_column_result result = new get_column_result();
      result.success = iface_.get_column(args.tablename, args.key, args.columnFamily_column);
      result.__isset.success = true;
      oprot.WriteMessageBegin(new TMessage("get_column", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_column_count_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_column_count_args args = new get_column_count_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_column_count_result result = new get_column_count_result();
      result.success = iface_.get_column_count(args.tablename, args.key, args.columnFamily_column);
      result.__isset.success = true;
      oprot.WriteMessageBegin(new TMessage("get_column_count", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void insert_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      insert_args args = new insert_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.insert(args.tablename, args.key, args.columnFamily_column, args.cellData, args.timestamp);
      return;
    }
    public void batch_insert_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      batch_insert_args args = new batch_insert_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.batch_insert(args.batchMutation);
      return;
    }
    public void batch_insert_blocking_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      batch_insert_blocking_args args = new batch_insert_blocking_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      batch_insert_blocking_result result = new batch_insert_blocking_result();
      result.success = iface_.batch_insert_blocking(args.batchMutation);
      result.__isset.success = true;
      oprot.WriteMessageBegin(new TMessage("batch_insert_blocking", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void remove_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      remove_args args = new remove_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.remove(args.tablename, args.key, args.columnFamily_column);
      return;
    }
    public void get_slice_super_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_slice_super_args args = new get_slice_super_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_slice_super_result result = new get_slice_super_result();
      result.success = iface_.get_slice_super(args.tablename, args.key, args.columnFamily_superColumnName, args.start, args.count);
      result.__isset.success = true;
      oprot.WriteMessageBegin(new TMessage("get_slice_super", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void get_superColumn_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      get_superColumn_args args = new get_superColumn_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      get_superColumn_result result = new get_superColumn_result();
      result.success = iface_.get_superColumn(args.tablename, args.key, args.columnFamily);
      result.__isset.success = true;
      oprot.WriteMessageBegin(new TMessage("get_superColumn", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void batch_insert_superColumn_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      batch_insert_superColumn_args args = new batch_insert_superColumn_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.batch_insert_superColumn(args.batchMutationSuper);
      return;
    }
    public void batch_insert_superColumn_blocking_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      batch_insert_superColumn_blocking_args args = new batch_insert_superColumn_blocking_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      batch_insert_superColumn_blocking_result result = new batch_insert_superColumn_blocking_result();
      result.success = iface_.batch_insert_superColumn_blocking(args.batchMutationSuper);
      result.__isset.success = true;
      oprot.WriteMessageBegin(new TMessage("batch_insert_superColumn_blocking", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }

  public class get_slice_args 
  {
    public string tablename;
    public string key;
    public string columnFamily_column;
    public int start;
    public int count;

    public Isset __isset;
    public struct Isset {
      public bool tablename;
      public bool key;
      public bool columnFamily_column;
      public bool start;
      public bool count;
    }

    public get_slice_args() {
      this.start = -1;
      this.count = -1;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      TStruct struc = iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case -1:
            if (field.Type == TType.String) {
              this.tablename = iprot.ReadString();
              this.__isset.tablename = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case -2:
            if (field.Type == TType.String) {
              this.key = iprot.ReadString();
              this.__isset.key = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case -3:
            if (field.Type == TType.String) {
              this.columnFamily_column = iprot.ReadString();
              this.__isset.columnFamily_column = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case -4:
            if (field.Type == TType.I32) {
              this.start = iprot.ReadI32();
              this.__isset.start = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case -5:
            if (field.Type == TType.I32) {
              this.count = iprot.ReadI32();
              this.__isset.count = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("get_slice_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.tablename != null) {
        field.Name = "tablename";
        field.Type = TType.String;
        field.ID = -1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.tablename);
        oprot.WriteFieldEnd();
      }
      if (this.key != null) {
        field.Name = "key";
        field.Type = TType.String;
        field.ID = -2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.key);
        oprot.WriteFieldEnd();
      }
      if (this.columnFamily_column != null) {
        field.Name = "columnFamily_column";
        field.Type = TType.String;
        field.ID = -3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.columnFamily_column);
        oprot.WriteFieldEnd();
      }
      field.Name = "start";
      field.Type = TType.I32;
      field.ID = -4;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(this.start);
      oprot.WriteFieldEnd();
      field.Name = "count";
      field.Type = TType.I32;
      field.ID = -5;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(this.count);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("get_slice_args(");
      sb.Append("tablename: ");
      sb.Append(this.tablename);
      sb.Append(",key: ");
      sb.Append(this.key);
      sb.Append(",columnFamily_column: ");
      sb.Append(this.columnFamily_column);
      sb.Append(",start: ");
      sb.Append(this.start);
      sb.Append(",count: ");
      sb.Append(this.count);
      sb.Append(")");
      return sb.ToString();
    }

  }

  public class get_slice_result 
  {
    public List<column_t> success;

    public Isset __isset;
    public struct Isset {
      public bool success;
    }

    public get_slice_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      TStruct struc = iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                this.success = new List<column_t>();
                TList _list22 = iprot.ReadListBegin();
                for( int _i23 = 0; _i23 < _list22.Count; ++_i23)
                {
                  column_t _elem24 = new column_t();
                  _elem24 = new column_t();
                  _elem24.Read(iprot);
                  this.success.Add(_elem24);
                }
                iprot.ReadListEnd();
              }
              this.__isset.success = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("get_slice_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.Name = "success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, this.success.Count));
            foreach (column_t _iter25 in this.success)
            {
              _iter25.Write(oprot);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("get_slice_result(");
      sb.Append("success: ");
      sb.Append(this.success);
      sb.Append(")");
      return sb.ToString();
    }

  }

  public class get_column_args 
  {
    public string tablename;
    public string key;
    public string columnFamily_column;

    public Isset __isset;
    public struct Isset {
      public bool tablename;
      public bool key;
      public bool columnFamily_column;
    }

    public get_column_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      TStruct struc = iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case -1:
            if (field.Type == TType.String) {
              this.tablename = iprot.ReadString();
              this.__isset.tablename = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case -2:
            if (field.Type == TType.String) {
              this.key = iprot.ReadString();
              this.__isset.key = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case -3:
            if (field.Type == TType.String) {
              this.columnFamily_column = iprot.ReadString();
              this.__isset.columnFamily_column = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("get_column_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.tablename != null) {
        field.Name = "tablename";
        field.Type = TType.String;
        field.ID = -1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.tablename);
        oprot.WriteFieldEnd();
      }
      if (this.key != null) {
        field.Name = "key";
        field.Type = TType.String;
        field.ID = -2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.key);
        oprot.WriteFieldEnd();
      }
      if (this.columnFamily_column != null) {
        field.Name = "columnFamily_column";
        field.Type = TType.String;
        field.ID = -3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.columnFamily_column);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("get_column_args(");
      sb.Append("tablename: ");
      sb.Append(this.tablename);
      sb.Append(",key: ");
      sb.Append(this.key);
      sb.Append(",columnFamily_column: ");
      sb.Append(this.columnFamily_column);
      sb.Append(")");
      return sb.ToString();
    }

  }

  public class get_column_result 
  {
    public column_t success;

    public Isset __isset;
    public struct Isset {
      public bool success;
    }

    public get_column_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      TStruct struc = iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              this.success = new column_t();
              this.success.Read(iprot);
              this.__isset.success = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("get_column_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.Name = "success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          this.success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("get_column_result(");
      sb.Append("success: ");
      sb.Append(this.success== null ? "<null>" : this.success.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

  public class get_column_count_args 
  {
    public string tablename;
    public string key;
    public string columnFamily_column;

    public Isset __isset;
    public struct Isset {
      public bool tablename;
      public bool key;
      public bool columnFamily_column;
    }

    public get_column_count_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      TStruct struc = iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case -1:
            if (field.Type == TType.String) {
              this.tablename = iprot.ReadString();
              this.__isset.tablename = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case -2:
            if (field.Type == TType.String) {
              this.key = iprot.ReadString();
              this.__isset.key = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case -3:
            if (field.Type == TType.String) {
              this.columnFamily_column = iprot.ReadString();
              this.__isset.columnFamily_column = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("get_column_count_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.tablename != null) {
        field.Name = "tablename";
        field.Type = TType.String;
        field.ID = -1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.tablename);
        oprot.WriteFieldEnd();
      }
      if (this.key != null) {
        field.Name = "key";
        field.Type = TType.String;
        field.ID = -2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.key);
        oprot.WriteFieldEnd();
      }
      if (this.columnFamily_column != null) {
        field.Name = "columnFamily_column";
        field.Type = TType.String;
        field.ID = -3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.columnFamily_column);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("get_column_count_args(");
      sb.Append("tablename: ");
      sb.Append(this.tablename);
      sb.Append(",key: ");
      sb.Append(this.key);
      sb.Append(",columnFamily_column: ");
      sb.Append(this.columnFamily_column);
      sb.Append(")");
      return sb.ToString();
    }

  }

  public class get_column_count_result 
  {
    public int success;

    public Isset __isset;
    public struct Isset {
      public bool success;
    }

    public get_column_count_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      TStruct struc = iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.I32) {
              this.success = iprot.ReadI32();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("get_column_count_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "success";
        field.Type = TType.I32;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(this.success);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("get_column_count_result(");
      sb.Append("success: ");
      sb.Append(this.success);
      sb.Append(")");
      return sb.ToString();
    }

  }

  public class insert_args 
  {
    public string tablename;
    public string key;
    public string columnFamily_column;
    public string cellData;
    public int timestamp;

    public Isset __isset;
    public struct Isset {
      public bool tablename;
      public bool key;
      public bool columnFamily_column;
      public bool cellData;
      public bool timestamp;
    }

    public insert_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      TStruct struc = iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case -1:
            if (field.Type == TType.String) {
              this.tablename = iprot.ReadString();
              this.__isset.tablename = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case -2:
            if (field.Type == TType.String) {
              this.key = iprot.ReadString();
              this.__isset.key = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case -3:
            if (field.Type == TType.String) {
              this.columnFamily_column = iprot.ReadString();
              this.__isset.columnFamily_column = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case -4:
            if (field.Type == TType.String) {
              this.cellData = iprot.ReadString();
              this.__isset.cellData = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case -5:
            if (field.Type == TType.I32) {
              this.timestamp = iprot.ReadI32();
              this.__isset.timestamp = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("insert_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.tablename != null) {
        field.Name = "tablename";
        field.Type = TType.String;
        field.ID = -1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.tablename);
        oprot.WriteFieldEnd();
      }
      if (this.key != null) {
        field.Name = "key";
        field.Type = TType.String;
        field.ID = -2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.key);
        oprot.WriteFieldEnd();
      }
      if (this.columnFamily_column != null) {
        field.Name = "columnFamily_column";
        field.Type = TType.String;
        field.ID = -3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.columnFamily_column);
        oprot.WriteFieldEnd();
      }
      if (this.cellData != null) {
        field.Name = "cellData";
        field.Type = TType.String;
        field.ID = -4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.cellData);
        oprot.WriteFieldEnd();
      }
      field.Name = "timestamp";
      field.Type = TType.I32;
      field.ID = -5;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(this.timestamp);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("insert_args(");
      sb.Append("tablename: ");
      sb.Append(this.tablename);
      sb.Append(",key: ");
      sb.Append(this.key);
      sb.Append(",columnFamily_column: ");
      sb.Append(this.columnFamily_column);
      sb.Append(",cellData: ");
      sb.Append(this.cellData);
      sb.Append(",timestamp: ");
      sb.Append(this.timestamp);
      sb.Append(")");
      return sb.ToString();
    }

  }

  public class batch_insert_args 
  {
    public batch_mutation_t batchMutation;

    public Isset __isset;
    public struct Isset {
      public bool batchMutation;
    }

    public batch_insert_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      TStruct struc = iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case -1:
            if (field.Type == TType.Struct) {
              this.batchMutation = new batch_mutation_t();
              this.batchMutation.Read(iprot);
              this.__isset.batchMutation = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("batch_insert_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.batchMutation != null) {
        field.Name = "batchMutation";
        field.Type = TType.Struct;
        field.ID = -1;
        oprot.WriteFieldBegin(field);
        this.batchMutation.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("batch_insert_args(");
      sb.Append("batchMutation: ");
      sb.Append(this.batchMutation== null ? "<null>" : this.batchMutation.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

  public class batch_insert_blocking_args 
  {
    public batch_mutation_t batchMutation;

    public Isset __isset;
    public struct Isset {
      public bool batchMutation;
    }

    public batch_insert_blocking_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      TStruct struc = iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case -1:
            if (field.Type == TType.Struct) {
              this.batchMutation = new batch_mutation_t();
              this.batchMutation.Read(iprot);
              this.__isset.batchMutation = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("batch_insert_blocking_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.batchMutation != null) {
        field.Name = "batchMutation";
        field.Type = TType.Struct;
        field.ID = -1;
        oprot.WriteFieldBegin(field);
        this.batchMutation.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("batch_insert_blocking_args(");
      sb.Append("batchMutation: ");
      sb.Append(this.batchMutation== null ? "<null>" : this.batchMutation.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

  public class batch_insert_blocking_result 
  {
    public bool success;

    public Isset __isset;
    public struct Isset {
      public bool success;
    }

    public batch_insert_blocking_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      TStruct struc = iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Bool) {
              this.success = iprot.ReadBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("batch_insert_blocking_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "success";
        field.Type = TType.Bool;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.success);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("batch_insert_blocking_result(");
      sb.Append("success: ");
      sb.Append(this.success);
      sb.Append(")");
      return sb.ToString();
    }

  }

  public class remove_args 
  {
    public string tablename;
    public string key;
    public string columnFamily_column;

    public Isset __isset;
    public struct Isset {
      public bool tablename;
      public bool key;
      public bool columnFamily_column;
    }

    public remove_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      TStruct struc = iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case -1:
            if (field.Type == TType.String) {
              this.tablename = iprot.ReadString();
              this.__isset.tablename = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case -2:
            if (field.Type == TType.String) {
              this.key = iprot.ReadString();
              this.__isset.key = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case -3:
            if (field.Type == TType.String) {
              this.columnFamily_column = iprot.ReadString();
              this.__isset.columnFamily_column = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("remove_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.tablename != null) {
        field.Name = "tablename";
        field.Type = TType.String;
        field.ID = -1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.tablename);
        oprot.WriteFieldEnd();
      }
      if (this.key != null) {
        field.Name = "key";
        field.Type = TType.String;
        field.ID = -2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.key);
        oprot.WriteFieldEnd();
      }
      if (this.columnFamily_column != null) {
        field.Name = "columnFamily_column";
        field.Type = TType.String;
        field.ID = -3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.columnFamily_column);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("remove_args(");
      sb.Append("tablename: ");
      sb.Append(this.tablename);
      sb.Append(",key: ");
      sb.Append(this.key);
      sb.Append(",columnFamily_column: ");
      sb.Append(this.columnFamily_column);
      sb.Append(")");
      return sb.ToString();
    }

  }

  public class get_slice_super_args 
  {
    public string tablename;
    public string key;
    public string columnFamily_superColumnName;
    public int start;
    public int count;

    public Isset __isset;
    public struct Isset {
      public bool tablename;
      public bool key;
      public bool columnFamily_superColumnName;
      public bool start;
      public bool count;
    }

    public get_slice_super_args() {
      this.start = -1;
      this.count = -1;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      TStruct struc = iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case -1:
            if (field.Type == TType.String) {
              this.tablename = iprot.ReadString();
              this.__isset.tablename = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case -2:
            if (field.Type == TType.String) {
              this.key = iprot.ReadString();
              this.__isset.key = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case -3:
            if (field.Type == TType.String) {
              this.columnFamily_superColumnName = iprot.ReadString();
              this.__isset.columnFamily_superColumnName = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case -4:
            if (field.Type == TType.I32) {
              this.start = iprot.ReadI32();
              this.__isset.start = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case -5:
            if (field.Type == TType.I32) {
              this.count = iprot.ReadI32();
              this.__isset.count = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("get_slice_super_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.tablename != null) {
        field.Name = "tablename";
        field.Type = TType.String;
        field.ID = -1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.tablename);
        oprot.WriteFieldEnd();
      }
      if (this.key != null) {
        field.Name = "key";
        field.Type = TType.String;
        field.ID = -2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.key);
        oprot.WriteFieldEnd();
      }
      if (this.columnFamily_superColumnName != null) {
        field.Name = "columnFamily_superColumnName";
        field.Type = TType.String;
        field.ID = -3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.columnFamily_superColumnName);
        oprot.WriteFieldEnd();
      }
      field.Name = "start";
      field.Type = TType.I32;
      field.ID = -4;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(this.start);
      oprot.WriteFieldEnd();
      field.Name = "count";
      field.Type = TType.I32;
      field.ID = -5;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32(this.count);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("get_slice_super_args(");
      sb.Append("tablename: ");
      sb.Append(this.tablename);
      sb.Append(",key: ");
      sb.Append(this.key);
      sb.Append(",columnFamily_superColumnName: ");
      sb.Append(this.columnFamily_superColumnName);
      sb.Append(",start: ");
      sb.Append(this.start);
      sb.Append(",count: ");
      sb.Append(this.count);
      sb.Append(")");
      return sb.ToString();
    }

  }

  public class get_slice_super_result 
  {
    public List<superColumn_t> success;

    public Isset __isset;
    public struct Isset {
      public bool success;
    }

    public get_slice_super_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      TStruct struc = iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.List) {
              {
                this.success = new List<superColumn_t>();
                TList _list26 = iprot.ReadListBegin();
                for( int _i27 = 0; _i27 < _list26.Count; ++_i27)
                {
                  superColumn_t _elem28 = new superColumn_t();
                  _elem28 = new superColumn_t();
                  _elem28.Read(iprot);
                  this.success.Add(_elem28);
                }
                iprot.ReadListEnd();
              }
              this.__isset.success = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("get_slice_super_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.Name = "success";
          field.Type = TType.List;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, this.success.Count));
            foreach (superColumn_t _iter29 in this.success)
            {
              _iter29.Write(oprot);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("get_slice_super_result(");
      sb.Append("success: ");
      sb.Append(this.success);
      sb.Append(")");
      return sb.ToString();
    }

  }

  public class get_superColumn_args 
  {
    public string tablename;
    public string key;
    public string columnFamily;

    public Isset __isset;
    public struct Isset {
      public bool tablename;
      public bool key;
      public bool columnFamily;
    }

    public get_superColumn_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      TStruct struc = iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case -1:
            if (field.Type == TType.String) {
              this.tablename = iprot.ReadString();
              this.__isset.tablename = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case -2:
            if (field.Type == TType.String) {
              this.key = iprot.ReadString();
              this.__isset.key = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case -3:
            if (field.Type == TType.String) {
              this.columnFamily = iprot.ReadString();
              this.__isset.columnFamily = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("get_superColumn_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.tablename != null) {
        field.Name = "tablename";
        field.Type = TType.String;
        field.ID = -1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.tablename);
        oprot.WriteFieldEnd();
      }
      if (this.key != null) {
        field.Name = "key";
        field.Type = TType.String;
        field.ID = -2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.key);
        oprot.WriteFieldEnd();
      }
      if (this.columnFamily != null) {
        field.Name = "columnFamily";
        field.Type = TType.String;
        field.ID = -3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.columnFamily);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("get_superColumn_args(");
      sb.Append("tablename: ");
      sb.Append(this.tablename);
      sb.Append(",key: ");
      sb.Append(this.key);
      sb.Append(",columnFamily: ");
      sb.Append(this.columnFamily);
      sb.Append(")");
      return sb.ToString();
    }

  }

  public class get_superColumn_result 
  {
    public superColumn_t success;

    public Isset __isset;
    public struct Isset {
      public bool success;
    }

    public get_superColumn_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      TStruct struc = iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Struct) {
              this.success = new superColumn_t();
              this.success.Read(iprot);
              this.__isset.success = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("get_superColumn_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        if (this.success != null) {
          field.Name = "success";
          field.Type = TType.Struct;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          this.success.Write(oprot);
          oprot.WriteFieldEnd();
        }
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("get_superColumn_result(");
      sb.Append("success: ");
      sb.Append(this.success== null ? "<null>" : this.success.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

  public class batch_insert_superColumn_args 
  {
    public batch_mutation_super_t batchMutationSuper;

    public Isset __isset;
    public struct Isset {
      public bool batchMutationSuper;
    }

    public batch_insert_superColumn_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      TStruct struc = iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case -1:
            if (field.Type == TType.Struct) {
              this.batchMutationSuper = new batch_mutation_super_t();
              this.batchMutationSuper.Read(iprot);
              this.__isset.batchMutationSuper = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("batch_insert_superColumn_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.batchMutationSuper != null) {
        field.Name = "batchMutationSuper";
        field.Type = TType.Struct;
        field.ID = -1;
        oprot.WriteFieldBegin(field);
        this.batchMutationSuper.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("batch_insert_superColumn_args(");
      sb.Append("batchMutationSuper: ");
      sb.Append(this.batchMutationSuper== null ? "<null>" : this.batchMutationSuper.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

  public class batch_insert_superColumn_blocking_args 
  {
    public batch_mutation_super_t batchMutationSuper;

    public Isset __isset;
    public struct Isset {
      public bool batchMutationSuper;
    }

    public batch_insert_superColumn_blocking_args() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      TStruct struc = iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case -1:
            if (field.Type == TType.Struct) {
              this.batchMutationSuper = new batch_mutation_super_t();
              this.batchMutationSuper.Read(iprot);
              this.__isset.batchMutationSuper = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("batch_insert_superColumn_blocking_args");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.batchMutationSuper != null) {
        field.Name = "batchMutationSuper";
        field.Type = TType.Struct;
        field.ID = -1;
        oprot.WriteFieldBegin(field);
        this.batchMutationSuper.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("batch_insert_superColumn_blocking_args(");
      sb.Append("batchMutationSuper: ");
      sb.Append(this.batchMutationSuper== null ? "<null>" : this.batchMutationSuper.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

  public class batch_insert_superColumn_blocking_result 
  {
    public bool success;

    public Isset __isset;
    public struct Isset {
      public bool success;
    }

    public batch_insert_superColumn_blocking_result() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      TStruct struc = iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 0:
            if (field.Type == TType.Bool) {
              this.success = iprot.ReadBool();
              this.__isset.success = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("batch_insert_superColumn_blocking_result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();

      if (this.__isset.success) {
        field.Name = "success";
        field.Type = TType.Bool;
        field.ID = 0;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.success);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("batch_insert_superColumn_blocking_result(");
      sb.Append("success: ");
      sb.Append(this.success);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
