/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using Thrift;
using Thrift.Protocol;
using Thrift.Transport;
public class batch_mutation_t 
{
  public string table;
  public string key;
  public Dictionary<string, List<column_t>> cfmap;

  public Isset __isset;
  public struct Isset {
    public bool table;
    public bool key;
    public bool cfmap;
  }

  public batch_mutation_t() {
  }

  public void Read (TProtocol iprot)
  {
    TField field;
    TStruct struc = iprot.ReadStructBegin();
    while (true)
    {
      field = iprot.ReadFieldBegin();
      if (field.Type == TType.Stop) { 
        break;
      }
      switch (field.ID)
      {
        case 1:
          if (field.Type == TType.String) {
            this.table = iprot.ReadString();
            this.__isset.table = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 2:
          if (field.Type == TType.String) {
            this.key = iprot.ReadString();
            this.__isset.key = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        case 3:
          if (field.Type == TType.Map) {
            {
              this.cfmap = new Dictionary<string, List<column_t>>();
              TMap _map0 = iprot.ReadMapBegin();
              for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
              {
                string _key2;
                List<column_t> _val3;
                _key2 = iprot.ReadString();
                {
                  _val3 = new List<column_t>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    column_t _elem6 = new column_t();
                    _elem6 = new column_t();
                    _elem6.Read(iprot);
                    _val3.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
                this.cfmap[_key2] = _val3;
              }
              iprot.ReadMapEnd();
            }
            this.__isset.cfmap = true;
          } else { 
            TProtocolUtil.Skip(iprot, field.Type);
          }
          break;
        default: 
          TProtocolUtil.Skip(iprot, field.Type);
          break;
      }
      iprot.ReadFieldEnd();
    }
    iprot.ReadStructEnd();
  }

  public void Write(TProtocol oprot) {
    TStruct struc = new TStruct("batch_mutation_t");
    oprot.WriteStructBegin(struc);
    TField field = new TField();
    if (this.table != null) {
      field.Name = "table";
      field.Type = TType.String;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(this.table);
      oprot.WriteFieldEnd();
    }
    if (this.key != null) {
      field.Name = "key";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(this.key);
      oprot.WriteFieldEnd();
    }
    if (this.cfmap != null) {
      field.Name = "cfmap";
      field.Type = TType.Map;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteMapBegin(new TMap(TType.String, TType.List, this.cfmap.Count));
        foreach (string _iter7 in this.cfmap.Keys)
        {
          oprot.WriteString(_iter7);
          {
            oprot.WriteListBegin(new TList(TType.Struct, this.cfmap[_iter7].Count));
            foreach (column_t _iter8 in this.cfmap[_iter7])
            {
              _iter8.Write(oprot);
              oprot.WriteListEnd();
            }
          }
          oprot.WriteMapEnd();
        }
      }
      oprot.WriteFieldEnd();
    }
    oprot.WriteFieldStop();
    oprot.WriteStructEnd();
  }

  public override string ToString() {
    StringBuilder sb = new StringBuilder("batch_mutation_t(");
    sb.Append("table: ");
    sb.Append(this.table);
    sb.Append(",key: ");
    sb.Append(this.key);
    sb.Append(",cfmap: ");
    sb.Append(this.cfmap);
    sb.Append(")");
    return sb.ToString();
  }

}

