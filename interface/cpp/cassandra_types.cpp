/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "cassandra_types.h"

namespace com { namespace facebook { namespace infrastructure { namespace service {

const char* column_t::ascii_fingerprint = "343DA57F446177400B333DC49B037B0C";
const uint8_t column_t::binary_fingerprint[16] = {0x34,0x3D,0xA5,0x7F,0x44,0x61,0x77,0x40,0x0B,0x33,0x3D,0xC4,0x9B,0x03,0x7B,0x0C};

uint32_t column_t::read(facebook::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  facebook::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using facebook::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == facebook::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->columnName);
          this->__isset.columnName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == facebook::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t column_t::write(facebook::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("column_t");
  xfer += oprot->writeFieldBegin("columnName", facebook::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->columnName);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("value", facebook::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("timestamp", facebook::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->timestamp);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* batch_mutation_t::ascii_fingerprint = "C858AE69977B2AD6C8A203362E03F52A";
const uint8_t batch_mutation_t::binary_fingerprint[16] = {0xC8,0x58,0xAE,0x69,0x97,0x7B,0x2A,0xD6,0xC8,0xA2,0x03,0x36,0x2E,0x03,0xF5,0x2A};

uint32_t batch_mutation_t::read(facebook::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  facebook::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using facebook::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == facebook::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table);
          this->__isset.table = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == facebook::thrift::protocol::T_MAP) {
          {
            this->cfmap.clear();
            uint32_t _size0;
            facebook::thrift::protocol::TType _ktype1;
            facebook::thrift::protocol::TType _vtype2;
            iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              std::string _key5;
              xfer += iprot->readString(_key5);
              std::vector<column_t> & _val6 = this->cfmap[_key5];
              {
                _val6.clear();
                uint32_t _size7;
                facebook::thrift::protocol::TType _etype10;
                iprot->readListBegin(_etype10, _size7);
                _val6.resize(_size7);
                uint32_t _i11;
                for (_i11 = 0; _i11 < _size7; ++_i11)
                {
                  xfer += _val6[_i11].read(iprot);
                }
                iprot->readListEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.cfmap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t batch_mutation_t::write(facebook::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("batch_mutation_t");
  xfer += oprot->writeFieldBegin("table", facebook::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->table);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("key", facebook::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("cfmap", facebook::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(facebook::thrift::protocol::T_STRING, facebook::thrift::protocol::T_LIST, this->cfmap.size());
    std::map<std::string, std::vector<column_t> > ::const_iterator _iter12;
    for (_iter12 = this->cfmap.begin(); _iter12 != this->cfmap.end(); ++_iter12)
    {
      xfer += oprot->writeString(_iter12->first);
      {
        xfer += oprot->writeListBegin(facebook::thrift::protocol::T_STRUCT, _iter12->second.size());
        std::vector<column_t> ::const_iterator _iter13;
        for (_iter13 = _iter12->second.begin(); _iter13 != _iter12->second.end(); ++_iter13)
        {
          xfer += (*_iter13).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* superColumn_t::ascii_fingerprint = "3087D377F70B088A928DBDBA19A70AB3";
const uint8_t superColumn_t::binary_fingerprint[16] = {0x30,0x87,0xD3,0x77,0xF7,0x0B,0x08,0x8A,0x92,0x8D,0xBD,0xBA,0x19,0xA7,0x0A,0xB3};

uint32_t superColumn_t::read(facebook::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  facebook::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using facebook::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == facebook::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == facebook::thrift::protocol::T_LIST) {
          {
            this->columns.clear();
            uint32_t _size14;
            facebook::thrift::protocol::TType _etype17;
            iprot->readListBegin(_etype17, _size14);
            this->columns.resize(_size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              xfer += this->columns[_i18].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.columns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t superColumn_t::write(facebook::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("superColumn_t");
  xfer += oprot->writeFieldBegin("name", facebook::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("columns", facebook::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(facebook::thrift::protocol::T_STRUCT, this->columns.size());
    std::vector<column_t> ::const_iterator _iter19;
    for (_iter19 = this->columns.begin(); _iter19 != this->columns.end(); ++_iter19)
    {
      xfer += (*_iter19).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* batch_mutation_super_t::ascii_fingerprint = "276AA410D6F48CFE915A783678C40763";
const uint8_t batch_mutation_super_t::binary_fingerprint[16] = {0x27,0x6A,0xA4,0x10,0xD6,0xF4,0x8C,0xFE,0x91,0x5A,0x78,0x36,0x78,0xC4,0x07,0x63};

uint32_t batch_mutation_super_t::read(facebook::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  facebook::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using facebook::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == facebook::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->table);
          this->__isset.table = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == facebook::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == facebook::thrift::protocol::T_MAP) {
          {
            this->cfmap.clear();
            uint32_t _size20;
            facebook::thrift::protocol::TType _ktype21;
            facebook::thrift::protocol::TType _vtype22;
            iprot->readMapBegin(_ktype21, _vtype22, _size20);
            uint32_t _i24;
            for (_i24 = 0; _i24 < _size20; ++_i24)
            {
              std::string _key25;
              xfer += iprot->readString(_key25);
              std::vector<superColumn_t> & _val26 = this->cfmap[_key25];
              {
                _val26.clear();
                uint32_t _size27;
                facebook::thrift::protocol::TType _etype30;
                iprot->readListBegin(_etype30, _size27);
                _val26.resize(_size27);
                uint32_t _i31;
                for (_i31 = 0; _i31 < _size27; ++_i31)
                {
                  xfer += _val26[_i31].read(iprot);
                }
                iprot->readListEnd();
              }
            }
            iprot->readMapEnd();
          }
          this->__isset.cfmap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t batch_mutation_super_t::write(facebook::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("batch_mutation_super_t");
  xfer += oprot->writeFieldBegin("table", facebook::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->table);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("key", facebook::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("cfmap", facebook::thrift::protocol::T_MAP, 3);
  {
    xfer += oprot->writeMapBegin(facebook::thrift::protocol::T_STRING, facebook::thrift::protocol::T_LIST, this->cfmap.size());
    std::map<std::string, std::vector<superColumn_t> > ::const_iterator _iter32;
    for (_iter32 = this->cfmap.begin(); _iter32 != this->cfmap.end(); ++_iter32)
    {
      xfer += oprot->writeString(_iter32->first);
      {
        xfer += oprot->writeListBegin(facebook::thrift::protocol::T_STRUCT, _iter32->second.size());
        std::vector<superColumn_t> ::const_iterator _iter33;
        for (_iter33 = _iter32->second.begin(); _iter33 != _iter32->second.end(); ++_iter33)
        {
          xfer += (*_iter33).write(oprot);
        }
        xfer += oprot->writeListEnd();
      }
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}}}} // namespace
