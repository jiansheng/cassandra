/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef cassandra_TYPES_H
#define cassandra_TYPES_H

#include <Thrift.h>
#include <reflection_limited_types.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>

#include "fb303_types.h"


namespace com { namespace facebook { namespace infrastructure { namespace service {

typedef std::map<std::string, std::vector<class column_t> >  column_family_map;

typedef std::map<std::string, std::vector<class superColumn_t> >  superColumn_family_map;

class column_t {
 public:

  static const char* ascii_fingerprint; // = "343DA57F446177400B333DC49B037B0C";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x3D,0xA5,0x7F,0x44,0x61,0x77,0x40,0x0B,0x33,0x3D,0xC4,0x9B,0x03,0x7B,0x0C};

  column_t() : columnName(""), value(""), timestamp(0) {
  }

  virtual ~column_t() throw() {}

  std::string columnName;
  std::string value;
  int32_t timestamp;

  struct __isset {
    __isset() : columnName(false), value(false), timestamp(false) {}
    bool columnName;
    bool value;
    bool timestamp;
  } __isset;

  bool operator == (const column_t & rhs) const
  {
    if (!(columnName == rhs.columnName))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const column_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const column_t & ) const;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class batch_mutation_t {
 public:

  static const char* ascii_fingerprint; // = "C858AE69977B2AD6C8A203362E03F52A";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x58,0xAE,0x69,0x97,0x7B,0x2A,0xD6,0xC8,0xA2,0x03,0x36,0x2E,0x03,0xF5,0x2A};

  batch_mutation_t() : table(""), key("") {
  }

  virtual ~batch_mutation_t() throw() {}

  std::string table;
  std::string key;
  column_family_map cfmap;

  struct __isset {
    __isset() : table(false), key(false), cfmap(false) {}
    bool table;
    bool key;
    bool cfmap;
  } __isset;

  bool operator == (const batch_mutation_t & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(cfmap == rhs.cfmap))
      return false;
    return true;
  }
  bool operator != (const batch_mutation_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const batch_mutation_t & ) const;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class superColumn_t {
 public:

  static const char* ascii_fingerprint; // = "3087D377F70B088A928DBDBA19A70AB3";
  static const uint8_t binary_fingerprint[16]; // = {0x30,0x87,0xD3,0x77,0xF7,0x0B,0x08,0x8A,0x92,0x8D,0xBD,0xBA,0x19,0xA7,0x0A,0xB3};

  superColumn_t() : name("") {
  }

  virtual ~superColumn_t() throw() {}

  std::string name;
  std::vector<column_t>  columns;

  struct __isset {
    __isset() : name(false), columns(false) {}
    bool name;
    bool columns;
  } __isset;

  bool operator == (const superColumn_t & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(columns == rhs.columns))
      return false;
    return true;
  }
  bool operator != (const superColumn_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const superColumn_t & ) const;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

class batch_mutation_super_t {
 public:

  static const char* ascii_fingerprint; // = "276AA410D6F48CFE915A783678C40763";
  static const uint8_t binary_fingerprint[16]; // = {0x27,0x6A,0xA4,0x10,0xD6,0xF4,0x8C,0xFE,0x91,0x5A,0x78,0x36,0x78,0xC4,0x07,0x63};

  batch_mutation_super_t() : table(""), key("") {
  }

  virtual ~batch_mutation_super_t() throw() {}

  std::string table;
  std::string key;
  superColumn_family_map cfmap;

  struct __isset {
    __isset() : table(false), key(false), cfmap(false) {}
    bool table;
    bool key;
    bool cfmap;
  } __isset;

  bool operator == (const batch_mutation_super_t & rhs) const
  {
    if (!(table == rhs.table))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(cfmap == rhs.cfmap))
      return false;
    return true;
  }
  bool operator != (const batch_mutation_super_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const batch_mutation_super_t & ) const;

  uint32_t read(facebook::thrift::protocol::TProtocol* iprot);
  uint32_t write(facebook::thrift::protocol::TProtocol* oprot) const;

};

}}}} // namespace

#endif
