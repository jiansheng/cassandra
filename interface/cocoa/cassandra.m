/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Cocoa/Cocoa.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>

#import "fb303.h"

#import "cassandra.h"


@implementation cassandraConstants
+ (void) initialize {
}
@end

@implementation column_t
- (id) initWithColumnName: (NSString *) columnName value: (NSString *) value timestamp: (int32_t) timestamp
{
  self = [super init];
  __columnName = [columnName retain];
  __columnName_isset = YES;
  __value = [value retain];
  __value_isset = YES;
  __timestamp = timestamp;
  __timestamp_isset = YES;
  return self;
}

- (void) dealloc
{
  [__columnName release];
  [__value release];
  [super dealloc];
}

- (NSString *) columnName {
  return [[__columnName retain] autorelease];
}

- (void) setColumnName: (NSString *) columnName {
  [columnName retain];
  [__columnName release];
  __columnName = columnName;
  __columnName_isset = YES;
}

- (BOOL) columnNameIsSet {
  return __columnName_isset;
}

- (void) unsetColumnName {
  [__columnName release];
  __columnName = nil;
  __columnName_isset = NO;
}

- (NSString *) value {
  return [[__value retain] autorelease];
}

- (void) setValue: (NSString *) value {
  [value retain];
  [__value release];
  __value = value;
  __value_isset = YES;
}

- (BOOL) valueIsSet {
  return __value_isset;
}

- (void) unsetValue {
  [__value release];
  __value = nil;
  __value_isset = NO;
}

- (int32_t) timestamp {
  return __timestamp;
}

- (void) setTimestamp: (int32_t) timestamp {
  __timestamp = timestamp;
  __timestamp_isset = YES;
}

- (BOOL) timestampIsSet {
  return __timestamp_isset;
}

- (void) unsetTimestamp {
  __timestamp_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setColumnName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"column_t"];
  if (__columnName_isset) {
    if (__columnName != nil) {
      [outProtocol writeFieldBeginWithName: @"columnName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __columnName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__value_isset) {
    if (__value != nil) {
      [outProtocol writeFieldBeginWithName: @"value" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __value];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"timestamp" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __timestamp];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"column_t("];
  [ms appendString: @"columnName:"];
  [ms appendFormat: @"\"%@\"", __columnName];
  [ms appendString: @",value:"];
  [ms appendFormat: @"\"%@\"", __value];
  [ms appendString: @",timestamp:"];
  [ms appendFormat: @"%i", __timestamp];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@implementation batch_mutation_t
- (id) initWithTable: (NSString *) table key: (NSString *) key cfmap: (column_family_map) cfmap
{
  self = [super init];
  __table = [table retain];
  __table_isset = YES;
  __key = [key retain];
  __key_isset = YES;
  __cfmap = [cfmap retain];
  __cfmap_isset = YES;
  return self;
}

- (void) dealloc
{
  [__table release];
  [__key release];
  [__cfmap release];
  [super dealloc];
}

- (NSString *) table {
  return [[__table retain] autorelease];
}

- (void) setTable: (NSString *) table {
  [table retain];
  [__table release];
  __table = table;
  __table_isset = YES;
}

- (BOOL) tableIsSet {
  return __table_isset;
}

- (void) unsetTable {
  [__table release];
  __table = nil;
  __table_isset = NO;
}

- (NSString *) key {
  return [[__key retain] autorelease];
}

- (void) setKey: (NSString *) key {
  [key retain];
  [__key release];
  __key = key;
  __key_isset = YES;
}

- (BOOL) keyIsSet {
  return __key_isset;
}

- (void) unsetKey {
  [__key release];
  __key = nil;
  __key_isset = NO;
}

- (NSDictionary *) cfmap {
  return [[__cfmap retain] autorelease];
}

- (void) setCfmap: (NSDictionary *) cfmap {
  [cfmap retain];
  [__cfmap release];
  __cfmap = cfmap;
  __cfmap_isset = YES;
}

- (BOOL) cfmapIsSet {
  return __cfmap_isset;
}

- (void) unsetCfmap {
  [__cfmap release];
  __cfmap = nil;
  __cfmap_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTable: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_MAP) {
          int _size0;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size0];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _key2 = [inProtocol readString];
            int _size4;
            [inProtocol readListBeginReturningElementType: NULL size: &_size4];
            NSMutableArray * _val3 = [[NSMutableArray alloc] initWithCapacity: _size4];
            int _i5;
            for (_i5 = 0; _i5 < _size4; ++_i5)
            {
              column_t *_elem6 = [[column_t alloc] init];
              [_elem6 read: inProtocol];
              [_val3 addObject: _elem6];
            }
            [inProtocol readListEnd];
            [fieldValue setObject: _val3 forKey: _key2];
          }
          [inProtocol readMapEnd];
          [self setCfmap: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"batch_mutation_t"];
  if (__table_isset) {
    if (__table != nil) {
      [outProtocol writeFieldBeginWithName: @"table" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __table];
      [outProtocol writeFieldEnd];
    }
  }
  if (__key_isset) {
    if (__key != nil) {
      [outProtocol writeFieldBeginWithName: @"key" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __key];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cfmap_isset) {
    if (__cfmap != nil) {
      [outProtocol writeFieldBeginWithName: @"cfmap" type: TType_MAP fieldID: 3];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_LIST size: [__cfmap count]];
        NSEnumerator * _iter7 = [__cfmap keyEnumerator];
        id key8;
        while ((key8 = [_iter7 nextObject]))
        {
          [outProtocol writeString: key8];
          {
            [outProtocol writeListBeginWithElementType: TType_STRUCT size: [[__cfmap objectForKey: key8] count]];
            int i10;
            for (i10 = 0; i10 < [[__cfmap objectForKey: key8] count]; i10++)
            {
              [[[__cfmap objectForKey: key8] objectAtIndex: i10] write: outProtocol];
            }
            [outProtocol writeListEnd];
          }
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"batch_mutation_t("];
  [ms appendString: @"table:"];
  [ms appendFormat: @"\"%@\"", __table];
  [ms appendString: @",key:"];
  [ms appendFormat: @"\"%@\"", __key];
  [ms appendString: @",cfmap:"];
  [ms appendFormat: @"%@", __cfmap];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@implementation superColumn_t
- (id) initWithName: (NSString *) name columns: (NSArray *) columns
{
  self = [super init];
  __name = [name retain];
  __name_isset = YES;
  __columns = [columns retain];
  __columns_isset = YES;
  return self;
}

- (void) dealloc
{
  [__name release];
  [__columns release];
  [super dealloc];
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (NSArray *) columns {
  return [[__columns retain] autorelease];
}

- (void) setColumns: (NSArray *) columns {
  [columns retain];
  [__columns release];
  __columns = columns;
  __columns_isset = YES;
}

- (BOOL) columnsIsSet {
  return __columns_isset;
}

- (void) unsetColumns {
  [__columns release];
  __columns = nil;
  __columns_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size11;
          [inProtocol readListBeginReturningElementType: NULL size: &_size11];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size11];
          int _i12;
          for (_i12 = 0; _i12 < _size11; ++_i12)
          {
            column_t *_elem13 = [[column_t alloc] init];
            [_elem13 read: inProtocol];
            [fieldValue addObject: _elem13];
          }
          [inProtocol readListEnd];
          [self setColumns: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"superColumn_t"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__columns_isset) {
    if (__columns != nil) {
      [outProtocol writeFieldBeginWithName: @"columns" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__columns count]];
        int i15;
        for (i15 = 0; i15 < [__columns count]; i15++)
        {
          [[__columns objectAtIndex: i15] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"superColumn_t("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",columns:"];
  [ms appendFormat: @"%@", __columns];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@implementation batch_mutation_super_t
- (id) initWithTable: (NSString *) table key: (NSString *) key cfmap: (superColumn_family_map) cfmap
{
  self = [super init];
  __table = [table retain];
  __table_isset = YES;
  __key = [key retain];
  __key_isset = YES;
  __cfmap = [cfmap retain];
  __cfmap_isset = YES;
  return self;
}

- (void) dealloc
{
  [__table release];
  [__key release];
  [__cfmap release];
  [super dealloc];
}

- (NSString *) table {
  return [[__table retain] autorelease];
}

- (void) setTable: (NSString *) table {
  [table retain];
  [__table release];
  __table = table;
  __table_isset = YES;
}

- (BOOL) tableIsSet {
  return __table_isset;
}

- (void) unsetTable {
  [__table release];
  __table = nil;
  __table_isset = NO;
}

- (NSString *) key {
  return [[__key retain] autorelease];
}

- (void) setKey: (NSString *) key {
  [key retain];
  [__key release];
  __key = key;
  __key_isset = YES;
}

- (BOOL) keyIsSet {
  return __key_isset;
}

- (void) unsetKey {
  [__key release];
  __key = nil;
  __key_isset = NO;
}

- (NSDictionary *) cfmap {
  return [[__cfmap retain] autorelease];
}

- (void) setCfmap: (NSDictionary *) cfmap {
  [cfmap retain];
  [__cfmap release];
  __cfmap = cfmap;
  __cfmap_isset = YES;
}

- (BOOL) cfmapIsSet {
  return __cfmap_isset;
}

- (void) unsetCfmap {
  [__cfmap release];
  __cfmap = nil;
  __cfmap_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTable: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_MAP) {
          int _size16;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size16];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size16];
          int _i17;
          for (_i17 = 0; _i17 < _size16; ++_i17)
          {
            NSString * _key18 = [inProtocol readString];
            int _size20;
            [inProtocol readListBeginReturningElementType: NULL size: &_size20];
            NSMutableArray * _val19 = [[NSMutableArray alloc] initWithCapacity: _size20];
            int _i21;
            for (_i21 = 0; _i21 < _size20; ++_i21)
            {
              superColumn_t *_elem22 = [[superColumn_t alloc] init];
              [_elem22 read: inProtocol];
              [_val19 addObject: _elem22];
            }
            [inProtocol readListEnd];
            [fieldValue setObject: _val19 forKey: _key18];
          }
          [inProtocol readMapEnd];
          [self setCfmap: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"batch_mutation_super_t"];
  if (__table_isset) {
    if (__table != nil) {
      [outProtocol writeFieldBeginWithName: @"table" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __table];
      [outProtocol writeFieldEnd];
    }
  }
  if (__key_isset) {
    if (__key != nil) {
      [outProtocol writeFieldBeginWithName: @"key" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __key];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cfmap_isset) {
    if (__cfmap != nil) {
      [outProtocol writeFieldBeginWithName: @"cfmap" type: TType_MAP fieldID: 3];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_LIST size: [__cfmap count]];
        NSEnumerator * _iter23 = [__cfmap keyEnumerator];
        id key24;
        while ((key24 = [_iter23 nextObject]))
        {
          [outProtocol writeString: key24];
          {
            [outProtocol writeListBeginWithElementType: TType_STRUCT size: [[__cfmap objectForKey: key24] count]];
            int i26;
            for (i26 = 0; i26 < [[__cfmap objectForKey: key24] count]; i26++)
            {
              [[[__cfmap objectForKey: key24] objectAtIndex: i26] write: outProtocol];
            }
            [outProtocol writeListEnd];
          }
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"batch_mutation_super_t("];
  [ms appendString: @"table:"];
  [ms appendFormat: @"\"%@\"", __table];
  [ms appendString: @",key:"];
  [ms appendFormat: @"\"%@\"", __key];
  [ms appendString: @",cfmap:"];
  [ms appendFormat: @"%@", __cfmap];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface Get_sliceResult_ : NSObject {
  NSArray * __success;

  BOOL __success_isset;
}

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation Get_sliceResult_
- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size27;
          [inProtocol readListBeginReturningElementType: NULL size: &_size27];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size27];
          int _i28;
          for (_i28 = 0; _i28 < _size27; ++_i28)
          {
            column_t *_elem29 = [[column_t alloc] init];
            [_elem29 read: inProtocol];
            [fieldValue addObject: _elem29];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Get_sliceResult_"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i31;
        for (i31 = 0; i31 < [__success count]; i31++)
        {
          [[__success objectAtIndex: i31] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Get_sliceResult_("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface Get_columnResult_ : NSObject {
  column_t * __success;

  BOOL __success_isset;
}

- (id) initWithSuccess: (column_t *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (column_t *) success;
- (void) setSuccess: (column_t *) success;
- (BOOL) successIsSet;

@end

@implementation Get_columnResult_
- (id) initWithSuccess: (column_t *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (column_t *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (column_t *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          column_t *fieldValue = [[column_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Get_columnResult_"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Get_columnResult_("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface Get_column_countResult_ : NSObject {
  int32_t __success;

  BOOL __success_isset;
}

- (id) initWithSuccess: (int32_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int32_t) success;
- (void) setSuccess: (int32_t) success;
- (BOOL) successIsSet;

@end

@implementation Get_column_countResult_
- (id) initWithSuccess: (int32_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (void) dealloc
{
  [super dealloc];
}

- (int32_t) success {
  return __success;
}

- (void) setSuccess: (int32_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Get_column_countResult_"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
    [outProtocol writeI32: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Get_column_countResult_("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface Batch_insert_blockingResult_ : NSObject {
  BOOL __success;

  BOOL __success_isset;
}

- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

@end

@implementation Batch_insert_blockingResult_
- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (void) dealloc
{
  [super dealloc];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Batch_insert_blockingResult_"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Batch_insert_blockingResult_("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface Get_slice_superResult_ : NSObject {
  NSArray * __success;

  BOOL __success_isset;
}

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation Get_slice_superResult_
- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size32;
          [inProtocol readListBeginReturningElementType: NULL size: &_size32];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size32];
          int _i33;
          for (_i33 = 0; _i33 < _size32; ++_i33)
          {
            superColumn_t *_elem34 = [[superColumn_t alloc] init];
            [_elem34 read: inProtocol];
            [fieldValue addObject: _elem34];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Get_slice_superResult_"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i36;
        for (i36 = 0; i36 < [__success count]; i36++)
        {
          [[__success objectAtIndex: i36] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Get_slice_superResult_("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface Get_superColumnResult_ : NSObject {
  superColumn_t * __success;

  BOOL __success_isset;
}

- (id) initWithSuccess: (superColumn_t *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (superColumn_t *) success;
- (void) setSuccess: (superColumn_t *) success;
- (BOOL) successIsSet;

@end

@implementation Get_superColumnResult_
- (id) initWithSuccess: (superColumn_t *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (superColumn_t *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (superColumn_t *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          superColumn_t *fieldValue = [[superColumn_t alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Get_superColumnResult_"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Get_superColumnResult_("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface Batch_insert_superColumn_blockingResult_ : NSObject {
  BOOL __success;

  BOOL __success_isset;
}

- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

@end

@implementation Batch_insert_superColumn_blockingResult_
- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (void) dealloc
{
  [super dealloc];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Batch_insert_superColumn_blockingResult_"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Batch_insert_superColumn_blockingResult_("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@implementation CassandraClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_get_slice: (NSString *) tablename : (NSString *) key : (NSString *) columnFamily_column : (int32_t) start : (int32_t) count
{
  [outProtocol writeMessageBeginWithName: @"get_slice" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"get_slice_args"];
  if (tablename != nil)  {
    [outProtocol writeFieldBeginWithName: @"tablename" type: TType_STRING fieldID: -1];
    [outProtocol writeString: tablename];
    [outProtocol writeFieldEnd];
  }
  if (key != nil)  {
    [outProtocol writeFieldBeginWithName: @"key" type: TType_STRING fieldID: -2];
    [outProtocol writeString: key];
    [outProtocol writeFieldEnd];
  }
  if (columnFamily_column != nil)  {
    [outProtocol writeFieldBeginWithName: @"columnFamily_column" type: TType_STRING fieldID: -3];
    [outProtocol writeString: columnFamily_column];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"start" type: TType_I32 fieldID: -4];
  [outProtocol writeI32: start];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"count" type: TType_I32 fieldID: -5];
  [outProtocol writeI32: count];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_get_slice
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Get_sliceResult_ * result = [[[Get_sliceResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"get_slice failed: unknown result"];
}

- (NSArray *) get_slice: (NSString *) tablename : (NSString *) key : (NSString *) columnFamily_column : (int32_t) start : (int32_t) count
{
  [self send_get_slice: tablename : key : columnFamily_column : start : count];
  return [self recv_get_slice];
}

- (void) send_get_column: (NSString *) tablename : (NSString *) key : (NSString *) columnFamily_column
{
  [outProtocol writeMessageBeginWithName: @"get_column" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"get_column_args"];
  if (tablename != nil)  {
    [outProtocol writeFieldBeginWithName: @"tablename" type: TType_STRING fieldID: -1];
    [outProtocol writeString: tablename];
    [outProtocol writeFieldEnd];
  }
  if (key != nil)  {
    [outProtocol writeFieldBeginWithName: @"key" type: TType_STRING fieldID: -2];
    [outProtocol writeString: key];
    [outProtocol writeFieldEnd];
  }
  if (columnFamily_column != nil)  {
    [outProtocol writeFieldBeginWithName: @"columnFamily_column" type: TType_STRING fieldID: -3];
    [outProtocol writeString: columnFamily_column];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (column_t *) recv_get_column
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Get_columnResult_ * result = [[[Get_columnResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"get_column failed: unknown result"];
}

- (column_t *) get_column: (NSString *) tablename : (NSString *) key : (NSString *) columnFamily_column
{
  [self send_get_column: tablename : key : columnFamily_column];
  return [self recv_get_column];
}

- (void) send_get_column_count: (NSString *) tablename : (NSString *) key : (NSString *) columnFamily_column
{
  [outProtocol writeMessageBeginWithName: @"get_column_count" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"get_column_count_args"];
  if (tablename != nil)  {
    [outProtocol writeFieldBeginWithName: @"tablename" type: TType_STRING fieldID: -1];
    [outProtocol writeString: tablename];
    [outProtocol writeFieldEnd];
  }
  if (key != nil)  {
    [outProtocol writeFieldBeginWithName: @"key" type: TType_STRING fieldID: -2];
    [outProtocol writeString: key];
    [outProtocol writeFieldEnd];
  }
  if (columnFamily_column != nil)  {
    [outProtocol writeFieldBeginWithName: @"columnFamily_column" type: TType_STRING fieldID: -3];
    [outProtocol writeString: columnFamily_column];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (int32_t) recv_get_column_count
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Get_column_countResult_ * result = [[[Get_column_countResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"get_column_count failed: unknown result"];
}

- (int32_t) get_column_count: (NSString *) tablename : (NSString *) key : (NSString *) columnFamily_column
{
  [self send_get_column_count: tablename : key : columnFamily_column];
  return [self recv_get_column_count];
}

- (void) send_insert: (NSString *) tablename : (NSString *) key : (NSString *) columnFamily_column : (NSString *) cellData : (int32_t) timestamp
{
  [outProtocol writeMessageBeginWithName: @"insert" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"insert_args"];
  if (tablename != nil)  {
    [outProtocol writeFieldBeginWithName: @"tablename" type: TType_STRING fieldID: -1];
    [outProtocol writeString: tablename];
    [outProtocol writeFieldEnd];
  }
  if (key != nil)  {
    [outProtocol writeFieldBeginWithName: @"key" type: TType_STRING fieldID: -2];
    [outProtocol writeString: key];
    [outProtocol writeFieldEnd];
  }
  if (columnFamily_column != nil)  {
    [outProtocol writeFieldBeginWithName: @"columnFamily_column" type: TType_STRING fieldID: -3];
    [outProtocol writeString: columnFamily_column];
    [outProtocol writeFieldEnd];
  }
  if (cellData != nil)  {
    [outProtocol writeFieldBeginWithName: @"cellData" type: TType_STRING fieldID: -4];
    [outProtocol writeString: cellData];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"timestamp" type: TType_I32 fieldID: -5];
  [outProtocol writeI32: timestamp];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) insert: (NSString *) tablename : (NSString *) key : (NSString *) columnFamily_column : (NSString *) cellData : (int32_t) timestamp
{
  [self send_insert: tablename : key : columnFamily_column : cellData : timestamp];
}

- (void) send_batch_insert: (batch_mutation_t *) batchMutation
{
  [outProtocol writeMessageBeginWithName: @"batch_insert" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"batch_insert_args"];
  if (batchMutation != nil)  {
    [outProtocol writeFieldBeginWithName: @"batchMutation" type: TType_STRUCT fieldID: -1];
    [batchMutation write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) batch_insert: (batch_mutation_t *) batchMutation
{
  [self send_batch_insert: batchMutation];
}

- (void) send_batch_insert_blocking: (batch_mutation_t *) batchMutation
{
  [outProtocol writeMessageBeginWithName: @"batch_insert_blocking" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"batch_insert_blocking_args"];
  if (batchMutation != nil)  {
    [outProtocol writeFieldBeginWithName: @"batchMutation" type: TType_STRUCT fieldID: -1];
    [batchMutation write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_batch_insert_blocking
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Batch_insert_blockingResult_ * result = [[[Batch_insert_blockingResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"batch_insert_blocking failed: unknown result"];
}

- (BOOL) batch_insert_blocking: (batch_mutation_t *) batchMutation
{
  [self send_batch_insert_blocking: batchMutation];
  return [self recv_batch_insert_blocking];
}

- (void) send_remove: (NSString *) tablename : (NSString *) key : (NSString *) columnFamily_column
{
  [outProtocol writeMessageBeginWithName: @"remove" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"remove_args"];
  if (tablename != nil)  {
    [outProtocol writeFieldBeginWithName: @"tablename" type: TType_STRING fieldID: -1];
    [outProtocol writeString: tablename];
    [outProtocol writeFieldEnd];
  }
  if (key != nil)  {
    [outProtocol writeFieldBeginWithName: @"key" type: TType_STRING fieldID: -2];
    [outProtocol writeString: key];
    [outProtocol writeFieldEnd];
  }
  if (columnFamily_column != nil)  {
    [outProtocol writeFieldBeginWithName: @"columnFamily_column" type: TType_STRING fieldID: -3];
    [outProtocol writeString: columnFamily_column];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) remove: (NSString *) tablename : (NSString *) key : (NSString *) columnFamily_column
{
  [self send_remove: tablename : key : columnFamily_column];
}

- (void) send_get_slice_super: (NSString *) tablename : (NSString *) key : (NSString *) columnFamily_superColumnName : (int32_t) start : (int32_t) count
{
  [outProtocol writeMessageBeginWithName: @"get_slice_super" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"get_slice_super_args"];
  if (tablename != nil)  {
    [outProtocol writeFieldBeginWithName: @"tablename" type: TType_STRING fieldID: -1];
    [outProtocol writeString: tablename];
    [outProtocol writeFieldEnd];
  }
  if (key != nil)  {
    [outProtocol writeFieldBeginWithName: @"key" type: TType_STRING fieldID: -2];
    [outProtocol writeString: key];
    [outProtocol writeFieldEnd];
  }
  if (columnFamily_superColumnName != nil)  {
    [outProtocol writeFieldBeginWithName: @"columnFamily_superColumnName" type: TType_STRING fieldID: -3];
    [outProtocol writeString: columnFamily_superColumnName];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"start" type: TType_I32 fieldID: -4];
  [outProtocol writeI32: start];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"count" type: TType_I32 fieldID: -5];
  [outProtocol writeI32: count];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_get_slice_super
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Get_slice_superResult_ * result = [[[Get_slice_superResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"get_slice_super failed: unknown result"];
}

- (NSArray *) get_slice_super: (NSString *) tablename : (NSString *) key : (NSString *) columnFamily_superColumnName : (int32_t) start : (int32_t) count
{
  [self send_get_slice_super: tablename : key : columnFamily_superColumnName : start : count];
  return [self recv_get_slice_super];
}

- (void) send_get_superColumn: (NSString *) tablename : (NSString *) key : (NSString *) columnFamily
{
  [outProtocol writeMessageBeginWithName: @"get_superColumn" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"get_superColumn_args"];
  if (tablename != nil)  {
    [outProtocol writeFieldBeginWithName: @"tablename" type: TType_STRING fieldID: -1];
    [outProtocol writeString: tablename];
    [outProtocol writeFieldEnd];
  }
  if (key != nil)  {
    [outProtocol writeFieldBeginWithName: @"key" type: TType_STRING fieldID: -2];
    [outProtocol writeString: key];
    [outProtocol writeFieldEnd];
  }
  if (columnFamily != nil)  {
    [outProtocol writeFieldBeginWithName: @"columnFamily" type: TType_STRING fieldID: -3];
    [outProtocol writeString: columnFamily];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (superColumn_t *) recv_get_superColumn
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Get_superColumnResult_ * result = [[[Get_superColumnResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"get_superColumn failed: unknown result"];
}

- (superColumn_t *) get_superColumn: (NSString *) tablename : (NSString *) key : (NSString *) columnFamily
{
  [self send_get_superColumn: tablename : key : columnFamily];
  return [self recv_get_superColumn];
}

- (void) send_batch_insert_superColumn: (batch_mutation_super_t *) batchMutationSuper
{
  [outProtocol writeMessageBeginWithName: @"batch_insert_superColumn" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"batch_insert_superColumn_args"];
  if (batchMutationSuper != nil)  {
    [outProtocol writeFieldBeginWithName: @"batchMutationSuper" type: TType_STRUCT fieldID: -1];
    [batchMutationSuper write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) batch_insert_superColumn: (batch_mutation_super_t *) batchMutationSuper
{
  [self send_batch_insert_superColumn: batchMutationSuper];
}

- (void) send_batch_insert_superColumn_blocking: (batch_mutation_super_t *) batchMutationSuper
{
  [outProtocol writeMessageBeginWithName: @"batch_insert_superColumn_blocking" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"batch_insert_superColumn_blocking_args"];
  if (batchMutationSuper != nil)  {
    [outProtocol writeFieldBeginWithName: @"batchMutationSuper" type: TType_STRUCT fieldID: -1];
    [batchMutationSuper write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_batch_insert_superColumn_blocking
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Batch_insert_superColumn_blockingResult_ * result = [[[Batch_insert_superColumn_blockingResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"batch_insert_superColumn_blocking failed: unknown result"];
}

- (BOOL) batch_insert_superColumn_blocking: (batch_mutation_super_t *) batchMutationSuper
{
  [self send_batch_insert_superColumn_blocking: batchMutationSuper];
  return [self recv_batch_insert_superColumn_blocking];
}

@end

