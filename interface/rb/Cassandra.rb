#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'thrift/protocol'
require 'FacebookService'
require File.dirname(__FILE__) + '/cassandra_types'

module Cassandra
  class Client < FacebookService::Client 
    include Thrift::Client

    def get_slice(tablename, key, columnFamily_column, start, count)
      send_get_slice(tablename, key, columnFamily_column, start, count)
      return recv_get_slice()
    end

    def send_get_slice(tablename, key, columnFamily_column, start, count)
      send_message('get_slice', Get_slice_args, :tablename => tablename, :key => key, :columnFamily_column => columnFamily_column, :start => start, :count => count)
    end

    def recv_get_slice()
      result = receive_message(Get_slice_result)
      return result.success unless result.success.nil?
      raise Thrift::ApplicationException.new(Thrift::ApplicationException::MISSING_RESULT, 'get_slice failed: unknown result')
    end

    def get_column(tablename, key, columnFamily_column)
      send_get_column(tablename, key, columnFamily_column)
      return recv_get_column()
    end

    def send_get_column(tablename, key, columnFamily_column)
      send_message('get_column', Get_column_args, :tablename => tablename, :key => key, :columnFamily_column => columnFamily_column)
    end

    def recv_get_column()
      result = receive_message(Get_column_result)
      return result.success unless result.success.nil?
      raise Thrift::ApplicationException.new(Thrift::ApplicationException::MISSING_RESULT, 'get_column failed: unknown result')
    end

    def get_column_count(tablename, key, columnFamily_column)
      send_get_column_count(tablename, key, columnFamily_column)
      return recv_get_column_count()
    end

    def send_get_column_count(tablename, key, columnFamily_column)
      send_message('get_column_count', Get_column_count_args, :tablename => tablename, :key => key, :columnFamily_column => columnFamily_column)
    end

    def recv_get_column_count()
      result = receive_message(Get_column_count_result)
      return result.success unless result.success.nil?
      raise Thrift::ApplicationException.new(Thrift::ApplicationException::MISSING_RESULT, 'get_column_count failed: unknown result')
    end

    def insert(tablename, key, columnFamily_column, cellData, timestamp)
      send_insert(tablename, key, columnFamily_column, cellData, timestamp)
    end

    def send_insert(tablename, key, columnFamily_column, cellData, timestamp)
      send_message('insert', Insert_args, :tablename => tablename, :key => key, :columnFamily_column => columnFamily_column, :cellData => cellData, :timestamp => timestamp)
    end
    def batch_insert(batchMutation)
      send_batch_insert(batchMutation)
    end

    def send_batch_insert(batchMutation)
      send_message('batch_insert', Batch_insert_args, :batchMutation => batchMutation)
    end
    def batch_insert_blocking(batchMutation)
      send_batch_insert_blocking(batchMutation)
      return recv_batch_insert_blocking()
    end

    def send_batch_insert_blocking(batchMutation)
      send_message('batch_insert_blocking', Batch_insert_blocking_args, :batchMutation => batchMutation)
    end

    def recv_batch_insert_blocking()
      result = receive_message(Batch_insert_blocking_result)
      return result.success unless result.success.nil?
      raise Thrift::ApplicationException.new(Thrift::ApplicationException::MISSING_RESULT, 'batch_insert_blocking failed: unknown result')
    end

    def remove(tablename, key, columnFamily_column)
      send_remove(tablename, key, columnFamily_column)
    end

    def send_remove(tablename, key, columnFamily_column)
      send_message('remove', Remove_args, :tablename => tablename, :key => key, :columnFamily_column => columnFamily_column)
    end
    def get_slice_super(tablename, key, columnFamily_superColumnName, start, count)
      send_get_slice_super(tablename, key, columnFamily_superColumnName, start, count)
      return recv_get_slice_super()
    end

    def send_get_slice_super(tablename, key, columnFamily_superColumnName, start, count)
      send_message('get_slice_super', Get_slice_super_args, :tablename => tablename, :key => key, :columnFamily_superColumnName => columnFamily_superColumnName, :start => start, :count => count)
    end

    def recv_get_slice_super()
      result = receive_message(Get_slice_super_result)
      return result.success unless result.success.nil?
      raise Thrift::ApplicationException.new(Thrift::ApplicationException::MISSING_RESULT, 'get_slice_super failed: unknown result')
    end

    def get_superColumn(tablename, key, columnFamily)
      send_get_superColumn(tablename, key, columnFamily)
      return recv_get_superColumn()
    end

    def send_get_superColumn(tablename, key, columnFamily)
      send_message('get_superColumn', Get_superColumn_args, :tablename => tablename, :key => key, :columnFamily => columnFamily)
    end

    def recv_get_superColumn()
      result = receive_message(Get_superColumn_result)
      return result.success unless result.success.nil?
      raise Thrift::ApplicationException.new(Thrift::ApplicationException::MISSING_RESULT, 'get_superColumn failed: unknown result')
    end

    def batch_insert_superColumn(batchMutationSuper)
      send_batch_insert_superColumn(batchMutationSuper)
    end

    def send_batch_insert_superColumn(batchMutationSuper)
      send_message('batch_insert_superColumn', Batch_insert_superColumn_args, :batchMutationSuper => batchMutationSuper)
    end
    def batch_insert_superColumn_blocking(batchMutationSuper)
      send_batch_insert_superColumn_blocking(batchMutationSuper)
      return recv_batch_insert_superColumn_blocking()
    end

    def send_batch_insert_superColumn_blocking(batchMutationSuper)
      send_message('batch_insert_superColumn_blocking', Batch_insert_superColumn_blocking_args, :batchMutationSuper => batchMutationSuper)
    end

    def recv_batch_insert_superColumn_blocking()
      result = receive_message(Batch_insert_superColumn_blocking_result)
      return result.success unless result.success.nil?
      raise Thrift::ApplicationException.new(Thrift::ApplicationException::MISSING_RESULT, 'batch_insert_superColumn_blocking failed: unknown result')
    end

  end

  class Processor < FacebookService::Processor 
    include Thrift::Processor

    def process_get_slice(seqid, iprot, oprot)
      args = read_args(iprot, Get_slice_args)
      result = Get_slice_result.new()
      result.success = @handler.get_slice(args.tablename, args.key, args.columnFamily_column, args.start, args.count)
      write_result(result, oprot, 'get_slice', seqid)
    end

    def process_get_column(seqid, iprot, oprot)
      args = read_args(iprot, Get_column_args)
      result = Get_column_result.new()
      result.success = @handler.get_column(args.tablename, args.key, args.columnFamily_column)
      write_result(result, oprot, 'get_column', seqid)
    end

    def process_get_column_count(seqid, iprot, oprot)
      args = read_args(iprot, Get_column_count_args)
      result = Get_column_count_result.new()
      result.success = @handler.get_column_count(args.tablename, args.key, args.columnFamily_column)
      write_result(result, oprot, 'get_column_count', seqid)
    end

    def process_insert(seqid, iprot, oprot)
      args = read_args(iprot, Insert_args)
      @handler.insert(args.tablename, args.key, args.columnFamily_column, args.cellData, args.timestamp)
      return
    end

    def process_batch_insert(seqid, iprot, oprot)
      args = read_args(iprot, Batch_insert_args)
      @handler.batch_insert(args.batchMutation)
      return
    end

    def process_batch_insert_blocking(seqid, iprot, oprot)
      args = read_args(iprot, Batch_insert_blocking_args)
      result = Batch_insert_blocking_result.new()
      result.success = @handler.batch_insert_blocking(args.batchMutation)
      write_result(result, oprot, 'batch_insert_blocking', seqid)
    end

    def process_remove(seqid, iprot, oprot)
      args = read_args(iprot, Remove_args)
      @handler.remove(args.tablename, args.key, args.columnFamily_column)
      return
    end

    def process_get_slice_super(seqid, iprot, oprot)
      args = read_args(iprot, Get_slice_super_args)
      result = Get_slice_super_result.new()
      result.success = @handler.get_slice_super(args.tablename, args.key, args.columnFamily_superColumnName, args.start, args.count)
      write_result(result, oprot, 'get_slice_super', seqid)
    end

    def process_get_superColumn(seqid, iprot, oprot)
      args = read_args(iprot, Get_superColumn_args)
      result = Get_superColumn_result.new()
      result.success = @handler.get_superColumn(args.tablename, args.key, args.columnFamily)
      write_result(result, oprot, 'get_superColumn', seqid)
    end

    def process_batch_insert_superColumn(seqid, iprot, oprot)
      args = read_args(iprot, Batch_insert_superColumn_args)
      @handler.batch_insert_superColumn(args.batchMutationSuper)
      return
    end

    def process_batch_insert_superColumn_blocking(seqid, iprot, oprot)
      args = read_args(iprot, Batch_insert_superColumn_blocking_args)
      result = Batch_insert_superColumn_blocking_result.new()
      result.success = @handler.batch_insert_superColumn_blocking(args.batchMutationSuper)
      write_result(result, oprot, 'batch_insert_superColumn_blocking', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Get_slice_args
    include Thrift::Struct
    Thrift::Struct.field_accessor self, :tablename, :key, :columnFamily_column, :start, :count
    FIELDS = {
      -1 => {:type => Thrift::Types::STRING, :name => 'tablename'},
      -2 => {:type => Thrift::Types::STRING, :name => 'key'},
      -3 => {:type => Thrift::Types::STRING, :name => 'columnFamily_column'},
      -4 => {:type => Thrift::Types::I32, :name => 'start', :default => -1},
      -5 => {:type => Thrift::Types::I32, :name => 'count', :default => -1}
    }
  end

  class Get_slice_result
    include Thrift::Struct
    Thrift::Struct.field_accessor self, :success
    FIELDS = {
      0 => {:type => Thrift::Types::LIST, :name => 'success', :element => {:type => Thrift::Types::STRUCT, :class => Column_t}}
    }
  end

  class Get_column_args
    include Thrift::Struct
    Thrift::Struct.field_accessor self, :tablename, :key, :columnFamily_column
    FIELDS = {
      -1 => {:type => Thrift::Types::STRING, :name => 'tablename'},
      -2 => {:type => Thrift::Types::STRING, :name => 'key'},
      -3 => {:type => Thrift::Types::STRING, :name => 'columnFamily_column'}
    }
  end

  class Get_column_result
    include Thrift::Struct
    Thrift::Struct.field_accessor self, :success
    FIELDS = {
      0 => {:type => Thrift::Types::STRUCT, :name => 'success', :class => Column_t}
    }
  end

  class Get_column_count_args
    include Thrift::Struct
    Thrift::Struct.field_accessor self, :tablename, :key, :columnFamily_column
    FIELDS = {
      -1 => {:type => Thrift::Types::STRING, :name => 'tablename'},
      -2 => {:type => Thrift::Types::STRING, :name => 'key'},
      -3 => {:type => Thrift::Types::STRING, :name => 'columnFamily_column'}
    }
  end

  class Get_column_count_result
    include Thrift::Struct
    Thrift::Struct.field_accessor self, :success
    FIELDS = {
      0 => {:type => Thrift::Types::I32, :name => 'success'}
    }
  end

  class Insert_args
    include Thrift::Struct
    Thrift::Struct.field_accessor self, :tablename, :key, :columnFamily_column, :cellData, :timestamp
    FIELDS = {
      -1 => {:type => Thrift::Types::STRING, :name => 'tablename'},
      -2 => {:type => Thrift::Types::STRING, :name => 'key'},
      -3 => {:type => Thrift::Types::STRING, :name => 'columnFamily_column'},
      -4 => {:type => Thrift::Types::STRING, :name => 'cellData'},
      -5 => {:type => Thrift::Types::I32, :name => 'timestamp'}
    }
  end

  class Insert_result
    include Thrift::Struct
    FIELDS = {

    }
  end

  class Batch_insert_args
    include Thrift::Struct
    Thrift::Struct.field_accessor self, :batchMutation
    FIELDS = {
      -1 => {:type => Thrift::Types::STRUCT, :name => 'batchMutation', :class => Batch_mutation_t}
    }
  end

  class Batch_insert_result
    include Thrift::Struct
    FIELDS = {

    }
  end

  class Batch_insert_blocking_args
    include Thrift::Struct
    Thrift::Struct.field_accessor self, :batchMutation
    FIELDS = {
      -1 => {:type => Thrift::Types::STRUCT, :name => 'batchMutation', :class => Batch_mutation_t}
    }
  end

  class Batch_insert_blocking_result
    include Thrift::Struct
    Thrift::Struct.field_accessor self, :success
    FIELDS = {
      0 => {:type => Thrift::Types::BOOL, :name => 'success'}
    }
  end

  class Remove_args
    include Thrift::Struct
    Thrift::Struct.field_accessor self, :tablename, :key, :columnFamily_column
    FIELDS = {
      -1 => {:type => Thrift::Types::STRING, :name => 'tablename'},
      -2 => {:type => Thrift::Types::STRING, :name => 'key'},
      -3 => {:type => Thrift::Types::STRING, :name => 'columnFamily_column'}
    }
  end

  class Remove_result
    include Thrift::Struct
    FIELDS = {

    }
  end

  class Get_slice_super_args
    include Thrift::Struct
    Thrift::Struct.field_accessor self, :tablename, :key, :columnFamily_superColumnName, :start, :count
    FIELDS = {
      -1 => {:type => Thrift::Types::STRING, :name => 'tablename'},
      -2 => {:type => Thrift::Types::STRING, :name => 'key'},
      -3 => {:type => Thrift::Types::STRING, :name => 'columnFamily_superColumnName'},
      -4 => {:type => Thrift::Types::I32, :name => 'start', :default => -1},
      -5 => {:type => Thrift::Types::I32, :name => 'count', :default => -1}
    }
  end

  class Get_slice_super_result
    include Thrift::Struct
    Thrift::Struct.field_accessor self, :success
    FIELDS = {
      0 => {:type => Thrift::Types::LIST, :name => 'success', :element => {:type => Thrift::Types::STRUCT, :class => SuperColumn_t}}
    }
  end

  class Get_superColumn_args
    include Thrift::Struct
    Thrift::Struct.field_accessor self, :tablename, :key, :columnFamily
    FIELDS = {
      -1 => {:type => Thrift::Types::STRING, :name => 'tablename'},
      -2 => {:type => Thrift::Types::STRING, :name => 'key'},
      -3 => {:type => Thrift::Types::STRING, :name => 'columnFamily'}
    }
  end

  class Get_superColumn_result
    include Thrift::Struct
    Thrift::Struct.field_accessor self, :success
    FIELDS = {
      0 => {:type => Thrift::Types::STRUCT, :name => 'success', :class => SuperColumn_t}
    }
  end

  class Batch_insert_superColumn_args
    include Thrift::Struct
    Thrift::Struct.field_accessor self, :batchMutationSuper
    FIELDS = {
      -1 => {:type => Thrift::Types::STRUCT, :name => 'batchMutationSuper', :class => Batch_mutation_super_t}
    }
  end

  class Batch_insert_superColumn_result
    include Thrift::Struct
    FIELDS = {

    }
  end

  class Batch_insert_superColumn_blocking_args
    include Thrift::Struct
    Thrift::Struct.field_accessor self, :batchMutationSuper
    FIELDS = {
      -1 => {:type => Thrift::Types::STRUCT, :name => 'batchMutationSuper', :class => Batch_mutation_super_t}
    }
  end

  class Batch_insert_superColumn_blocking_result
    include Thrift::Struct
    Thrift::Struct.field_accessor self, :success
    FIELDS = {
      0 => {:type => Thrift::Types::BOOL, :name => 'success'}
    }
  end

end

